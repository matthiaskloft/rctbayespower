% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_grid_analysis.R
\name{power_grid_analysis}
\alias{power_grid_analysis}
\title{Power Grid Analysis for Bayesian RCTs}
\usage{
power_grid_analysis(
  target_power_success = 0.9,
  target_power_futility = 0.95,
  sample_sizes,
  effect_sizes,
  threshold_success,
  threshold_futility,
  design_prior = NULL,
  percent_group_treat = 0.5,
  power_analysis_fn = "power_analysis",
  n_simulations = 500,
  ...
)
}
\arguments{
\item{target_power_success}{Desired power level for success decisions (default: 0.9)}

\item{target_power_futility}{Desired power level for futility decisions (default: 0.95)}

\item{sample_sizes}{Vector of total sample sizes to test}

\item{effect_sizes}{Vector of effect sizes to test}

\item{threshold_success}{Upper threshold for success determination (required)}

\item{threshold_futility}{Lower threshold for futility determination (required)}

\item{design_prior}{Optional design prior for the effect size for integrated power. Can be:
\itemize{
\item A string in brms prior syntax (e.g., "normal(0.3, 0.1)", "student_t(6, 0.5, 0.2)", "gamma(2, 3)", "beta(2, 5)", "exponential(1)", "uniform(0, 1)", etc.). Any distribution supported by brms with a corresponding density function is supported.
\item An R function taking effect size as input (e.g., function(x) dnorm(x, 0.5, 0.2))
\item NULL for no design prior (default)
}}

\item{percent_group_treat}{Percentage of total sample allocated to treatment group (default: .5)}

\item{power_analysis_fn}{Power analysis function to use. Either "power_analysis" for custom models or "power_analysis_ancova" for ANCOVA wrapper (default: "power_analysis")}

\item{n_simulations}{Number of simulations per combination (default: 500)}

\item{...}{All arguments required by the chosen power analysis function (except n_control, n_treatment, effect_size, threshold_success, and threshold_futility which are handled automatically)}
}
\value{
A list of class "rctbayespower_grid" containing:
\itemize{
\item target_power_success: Desired success power level
\item target_power_futility: Desired futility power level
\item threshold_success: Success threshold used in analysis
\item threshold_futility: Futility threshold used in analysis
\item sample_sizes: Vector of tested sample sizes
\item effect_sizes: Vector of tested effect sizes
\item design_prior: Design prior specification
\item power_surface: Data frame with power results for all combinations
\item integrated_power: If design prior provided, integrated power and probability across effect sizes
\item optimal_combinations: Sample size/effect size combinations achieving target power
\item detailed_results: Full power analysis results for each combination
}
}
\description{
Comprehensive analysis varying both sample sizes and effect sizes, with optional
design prior for integrated power computation. This function provides flexible
power analysis across multiple scenarios and can compute weighted average
power using user-specified prior distributions.
}
\details{
This function runs power analyses across all combinations of sample_sizes and effect_sizes.
When design_prior is provided, it computes integrated power by weighting each effect size
according to the specified design prior distribution.

The design prior can be specified in two ways:
\itemize{
\item \strong{brms syntax}: String expressions like "normal(0.5, 0.2)" or "student_t(6, 0.3, 0.1)"
\item \strong{R function}: User-defined function, e.g., function(x) dnorm(x, 0.5, 0.2)
}

For custom power analysis (power_analysis_fn = "power_analysis"), you must provide:
simulate_data_fn, model_formula_true_params, model_formula_estimation, family,
priors_true_params, priors_estimation, target_param

For ANCOVA power analysis (power_analysis_fn = "power_analysis_ancova"), you must provide:
outcome_type, baseline_effect
}
\examples{
\donttest{
# Basic analysis across sample sizes and effect sizes
grid_result <- power_grid_analysis(
  target_power_success = 0.8,
  sample_sizes = c(40, 80),
  effect_sizes = c(0.4, 0.8),
  threshold_success = 0.2,
  threshold_futility = 0,
  power_analysis_fn = "power_analysis_ancova",
  outcome_type = "continuous",
  baseline_effect = 0.2,
  n_simulations = 1,
  brms_args = list(algorithm = "meanfield"), # fast algorithm for testing
  n_cores = 1,
  progress_updates = 5
)
}
}
