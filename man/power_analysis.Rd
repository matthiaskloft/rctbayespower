% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_analysis.R
\name{power_analysis}
\alias{power_analysis}
\title{Flexible Bayesian Power Analysis for RCTs}
\usage{
power_analysis(
  n_control,
  n_treatment,
  simulate_data_fn,
  model_formula_true_params = NULL,
  model_formula_estimation = NULL,
  family = NULL,
  priors_true_params = NULL,
  priors_estimation = NULL,
  target_param,
  threshold_success = NULL,
  threshold_futility = NULL,
  p_sig_success = 0.975,
  p_sig_futility = 0.5,
  n_simulations = 1000,
  brms_args = list(algorithm = "sampling", iter = 1500, warmup = 500, chains = 2, cores =
    1, init = 0.1, control = list(adapt_delta = 0.9)),
  seed = NULL,
  n_cores = 1,
  brms_design_true_params = NULL,
  brms_design_estimation = NULL,
  progress_updates = 10,
  compile_models_only = FALSE
)
}
\arguments{
\item{n_control}{Number of participants in control group}

\item{n_treatment}{Number of participants in treatment group}

\item{simulate_data_fn}{User-defined function that takes (n_control, n_treatment) and returns a data frame}

\item{model_formula_true_params}{brms formula object for design model with true parameters}

\item{model_formula_estimation}{brms formula object for estimation model}

\item{family}{Distributional family for brms (e.g., gaussian(), bernoulli(), poisson())}

\item{priors_true_params}{Priors with true parameter values (as constants) for design model}

\item{priors_estimation}{Priors for estimation in power simulation}

\item{target_param}{Name of the parameter to track for power calculation (without "b_" prefix)}

\item{threshold_success}{Upper threshold for success determination (not needed if compile_models_only=TRUE)}

\item{threshold_futility}{Lower threshold for futility determination (not needed if compile_models_only=TRUE)}

\item{p_sig_success}{Probability threshold for declaring success (default 0.975)}

\item{p_sig_futility}{Probability threshold for declaring futility (default 0.5)}

\item{n_simulations}{Number of simulation iterations}

\item{brms_args}{Arguments passed to brms for estimation models. Default includes algorithm="sampling", iter=1200, warmup=200, chains=2, cores=1. User can override any of these or add additional arguments.}

\item{seed}{Random seed for reproducibility}

\item{n_cores}{Number of cores for parallel processing. If n_cores > 1, simulations will run in parallel.}

\item{brms_design_true_params}{Optional pre-fitted brms model with true parameters. If provided, this model will be used instead of fitting a new design model.}

\item{brms_design_estimation}{Optional pre-fitted brms model template for estimation. If provided, this model will be used instead of fitting a new design model.}

\item{progress_updates}{Number of progress updates to show during parallel processing. Default is 10. Set to 0 to disable progress updates.}

\item{compile_models_only}{If TRUE, only compile the brms models and return them without running simulations. Used for model caching in power_grid_analysis(). Default is FALSE.}
}
\value{
A list of class "rctbayespower" containing the following elements (when compile_models_only=FALSE), or a list with compiled models and arguments for later use (when compile_models_only=TRUE):
\describe{
\item{n_simulations}{Number of simulations requested}
\item{successful_fits}{Number of simulations that converged successfully}
\item{convergence_rate}{Proportion of simulations that converged (successful_fits / n_simulations)}
\item{power_success}{Proportion of successful simulations where P(treatment_effect > threshold_success) > p_sig_success}
\item{power_futility}{Proportion of successful simulations where P(treatment_effect < threshold_futility) > p_sig_futility}
\item{mean_prob_success}{Mean posterior probability that treatment effect exceeds success threshold across all successful simulations}
\item{mean_prob_futility}{Mean posterior probability that treatment effect is below futility threshold across all successful simulations}
\item{mcse_power_success}{Monte Carlo Standard Error for power_success}
\item{mcse_power_futility}{Monte Carlo Standard Error for power_futility}
\item{mcse_mean_prob_success}{Monte Carlo Standard Error for mean_prob_success}
\item{mcse_mean_prob_futility}{Monte Carlo Standard Error for mean_prob_futility}
\item{mean_effect_estimate}{Mean of the posterior means of the treatment effect across all successful simulations}
\item{median_effect_estimate}{Median of the posterior medians of the treatment effect across all successful simulations}
\item{sd_mean_effect_estimate}{Standard deviation of the posterior means of the treatment effect across all successful simulations}
\item{sd_median_effect_estimate}{Standard deviation of the posterior medians of the treatment effect across all successful simulations}
\item{study_parameters}{List containing the input parameters: n_control, n_treatment, target_param, thresholds, and probability thresholds}
\item{true_parameters}{List containing the true parameter values used in data generation: fixef (fixed effects) and ranef (random effects, if any)}
\item{model_formula_true_params}{The brms formula used for the design model with true parameters}
\item{model_formula_estimation}{The brms formula used for the estimation model}
\item{family}{The distributional family used for modeling}
\item{simulation_results}{List containing the raw results from each successful simulation, including individual treatment effect estimates, probabilities, and convergence information}
}
}
\description{
Conduct Bayesian power analysis for randomized controlled trials using user-specified
models and data generation functions. This function uses a design-based approach with
separate models for true parameter specification and estimation.
}
\examples{
\donttest{
# Define data simulation function
simulate_data <- function(n_control, n_treatment) {
  data.frame(
    outcome = rnorm(n_control + n_treatment),
    baseline = rnorm(n_control + n_treatment),
    group = factor(rep(c(0, 1), times = c(n_control, n_treatment)),
      levels = c(0, 1), labels = c("ctrl", "treat")
    )
  )
}

# Define model formulas and priors
model_formula_true <- brms::bf(outcome ~ baseline + group, center = FALSE)
model_formula_est <- brms::bf(outcome ~ baseline + group)
priors_true <- c(
  brms::set_prior("constant(.2)", class = "b", coef = "baseline"),
  # Effect size is defined by this prior
  brms::set_prior("constant(.5)", class = "b", coef = "grouptreat"),
  brms::set_prior("constant(0)", class = "b", coef = "Intercept"),
  brms::set_prior("constant(1)", class = "sigma")
)
priors_est <- c(
  brms::set_prior("student_t(3, 0, 2)", class = "b"),
  brms::set_prior("student_t(3, 0, 1)", class = "b", coef = "baseline"),
  brms::set_prior("student_t(3, 0, 2)", class = "Intercept"),
  brms::set_prior("student_t(3, 0, 1)", class = "sigma")
)

# Run power analysis with optimized brms_args
power_result <- power_analysis(
  n_control = 50, 
  n_treatment = 50,
  simulate_data_fn = simulate_data,
  model_formula_true_params = model_formula_true,
  model_formula_estimation = model_formula_est,
  family = gaussian(),
  priors_true_params = priors_true,
  priors_estimation = priors_est,
  target_param = "grouptreat",
  threshold_success = 0.2,
  threshold_futility = 0,
  p_sig_success = 0.95,
  p_sig_futility = 0.5,
  n_simulations = 1,
  brms_args = list(algorithm = "meanfield"),
  n_cores = 1,
  progress_updates = 5
)
}
}
