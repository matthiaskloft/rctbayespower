% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rctbayespower_design.R
\name{build_design}
\alias{build_design}
\title{Create an rctbayespower_design Object}
\usage{
build_design(
  model = NULL,
  target_params = NULL,
  n_interim_analyses = NULL,
  thresholds_success = NULL,
  thresholds_futility = NULL,
  p_sig_success = NULL,
  p_sig_futility = NULL,
  interim_function = NULL,
  design_name = NULL
)
}
\arguments{
\item{model}{An object of class "rctbayespower_model" created by
\code{\link[=build_model]{build_model()}} or predefined model functions}

\item{target_params}{Character vector specifying which model parameters to
analyze for power. Must be valid parameter names from the brms model
(e.g., "b_grouptreat" for treatment effect)}

\item{n_interim_analyses}{Number of interim analyses planned during the study.
Use 0 for studies with only final analysis. Must be non-negative integer.}

\item{thresholds_success}{Numeric vector of success thresholds for each target
parameter. Length must match target_params. These represent the minimum
clinically meaningful effect sizes.}

\item{thresholds_futility}{Numeric vector of futility thresholds for each target
parameter. Length must match target_params. These represent effect sizes
below which the treatment is considered ineffective.}

\item{p_sig_success}{Probability threshold for declaring success. The posterior
probability that the effect exceeds the success threshold must be greater
than this value to declare success (typically 0.975 or 0.95).}

\item{p_sig_futility}{Probability threshold for declaring futility. The posterior
probability that the effect is below the futility threshold must be greater
than this value to declare futility (typically 0.5).}

\item{interim_function}{Optional function for adaptive interim analyses. If provided,
must accept an interim_parameters argument defined as a call to list().
Currently not fully implemented.}

\item{design_name}{Optional character string providing a descriptive name for the design}
}
\value{
An object of class "rctbayespower_design" containing all elements from
the model plus the analysis configuration. Key components include:
\describe{
\item{data_simulation_fn}{Data simulation function from the model}
\item{brms_model}{Compiled brms model template}
\item{target_params}{Target parameters for analysis}
\item{thresholds_success}{Success thresholds}
\item{thresholds_futility}{Futility thresholds}
\item{p_sig_success}{Success probability threshold}
\item{p_sig_futility}{Futility probability threshold}
}
}
\description{
Constructs an rctbayespower_design object that combines a rctbayespower_model
with analysis configuration parameters for Bayesian power analysis. This object
encapsulates all information needed to conduct power simulations.
}
\details{
The rctbayespower_design class combines model specifications with analysis
decision criteria:

\strong{Model Integration:} Inherits the data simulation function, compiled brms
model, and metadata from the model object.

\strong{Decision Thresholds:} Success and futility thresholds define the
regions of practical equivalence (ROPE) for decision making. Effects above
the success threshold are considered clinically meaningful, while effects
below the futility threshold suggest treatment ineffectiveness.

\strong{Probability Thresholds:} The p_sig_success and p_sig_futility parameters
control the certainty required for decisions. Higher values require stronger
evidence.

\strong{Validation:} All parameters are validated for consistency with the
underlying model structure and each other.
}
\examples{
\dontrun{
# Create an ANCOVA model
ancova_model <- build_model_ancova_cont()

# Create a design for analyzing treatment effect
my_design <- build_design(
  model = ancova_model,
  target_params = "b_grouptreat",
  n_interim_analyses = 0,
  thresholds_success = 0.2,
  thresholds_futility = 0,
  p_sig_success = 0.975,
  p_sig_futility = 0.5,
  design_name = "ANCOVA Treatment Effect Analysis"
)
}
}
\seealso{
\code{\link[=build_model]{build_model()}}, \code{\link[=simulate_single_run]{simulate_single_run()}}
}
