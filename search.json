[{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"rctbayespower R package conducting Bayesian power analysis randomized controlled trials (RCTs) using brms Stan. package provides tools estimating power curves, determining optimal sample sizes, incorporating prior knowledge treatment effects using region practical equivalence (ROPE) decision making.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"current-status-updated---2025-07-21","dir":"","previous_headings":"","what":"Current Status (Updated - 2025-07-21)","title":"CLAUDE.md","text":"Core Package State: Functional stable core documentation lag ✅ IMPLEMENTED FEATURES - Object-Oriented API: Core Functions (100% Complete & Working): - power_analysis() - Main Bayesian power analysis function using new object-oriented API - build_model() - Create model specifications power analysis - build_design() - Create experimental design configurations - build_conditions() - Generate analysis conditions design parameters - simulate_single_run() - Execute single simulation run power analysis Pre-built Models: - build_model(\"ancova_cont_2arms\")() - ANCOVA model continuous outcomes ✅ - : build_model_ancova() generalized version wrappers specific defaults Advanced Features (100% Complete): - Design Prior Integration - Supports brms syntax comprehensive fallback hierarchy - Integrated Power Computation - Weighted power across effect sizes using priors - Sophisticated Parallelization - Robust parallel processing parameter preservation - Comprehensive Plotting - Multiple visualization types auto-detection - Model Caching - Significant performance improvements grid analyses S3 Methods (100% Complete): - plot.rctbayespower_sim_result() - Visualization power analysis results - print.rctbayespower_*() methods object types ⚠️ INCOMPLETE FEATURES: Documentation Inconsistencies (Critical): - Vignettes: Still reference non-existent power_analysis_ancova() function - need complete rewriting - Manual pages: still reference old function names - vignettes need updating new API Test Suite (0% Complete): - Status: test files contain TODO comments - Impact: automated testing coverage - Files: 4 test files placeholder content Missing Outcome Types: - Binary outcomes - Referenced old docs never implemented - Count outcomes - Referenced old docs never implemented Current Production-Ready Workflow:","code":"# 1. Create model → 2. Create design → 3. Create conditions → 4. Run analysis model_ancova <- build_model(\"ancova_cont_2arms\")() design <- build_design(model, target_params, thresholds, p_sig) conditions <- build_conditions(design, condition_values, static_values) result <- power_analysis(conditions, n_cores, n_simulations)"},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"documentation-guidelines","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Documentation Guidelines","title":"CLAUDE.md","text":"Always update documentations directly .R file’s roxygen documentation CRITICAL: updating roxygen comments, run devtools::document() regenerate .Rd files Never manually edit .Rd files man/ directory - auto-generated edit README.Rmd file, README.md file get build later.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"documentation-best-practices","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Documentation Best Practices","title":"CLAUDE.md","text":"Examples documentation function need short concise possible one variant function demonstrated function extended run time","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"id_1-avoiding-documentation-mismatches","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines > R CMD Check Best Practices","what":"1. Avoiding Documentation Mismatches","title":"CLAUDE.md","text":"Problem: R CMD check fails default parameter values code don’t match roxygen documentation. Solution: Always ensure roxygen @param documentation matches actual default values function signatures. Example Fix: Recent fixes applied: Updated documentation p_sig_success power_analysis.R, class system fixes throughout package.","code":"# BAD: Code has default = 0.975 but docs say 0.95 #' @param p_sig_success Probability threshold for success (default 0.95) my_function <- function(p_sig_success = 0.975) { ... }  # GOOD: Documentation matches code #' @param p_sig_success Probability threshold for success (default 0.975)  my_function <- function(p_sig_success = 0.975) { ... }"},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"documentation-conventions","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Documentation Conventions","title":"CLAUDE.md","text":"Don’t use  roxygen docs. Use [functionname()] instead.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"code-writing-guidelines","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Code Writing Guidelines","title":"CLAUDE.md","text":"Always wrap argument names quotes displaying printed output stop(), warning(), message(), documentation. improves clarity avoids confusion actual values natural language.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Kloft. Author, maintainer, copyright holder.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kloft M (2025). rctbayespower: Bayesian Power Analysis Randomized Controlled Trials. R package version 0.1.0, https://matthiaskloft.github.io/rctbayespower/.","code":"@Manual{,   title = {rctbayespower: Bayesian Power Analysis for Randomized Controlled Trials},   author = {Matthias Kloft},   year = {2025},   note = {R package version 0.1.0},   url = {https://matthiaskloft.github.io/rctbayespower/}, }"},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"experimental package yet fully tested. Therefore, recommend using production code critical analyses.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"can install development version rctbayespower GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"matthiaskloft/rctbayespower\")"},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"rctbayespower provides tools conducting Bayesian power analysis randomized controlled trials (RCTs) using brms Stan.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"ressources","dir":"","previous_headings":"","what":"Ressources","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"best way get started visit package website introductory vignette: Website: https://matthiaskloft.github.io/rctbayespower/ Vignettes: Introduction: Basic usage concepts Prior Specifications: Working priors Advanced Modeling: Complex designs Algorithm Performance: Performance optimization Open Issue","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Conditions for Power Analysis — build_conditions","title":"Build Conditions for Power Analysis — build_conditions","text":"Creates structured set conditions argument lists power analysis simulations. function takes varying condition parameters static parameters, validates design requirements, creates necessary argument combinations simulation runs.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Conditions for Power Analysis — build_conditions","text":"","code":"build_conditions(design, condition_values, static_values)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Conditions for Power Analysis — build_conditions","text":"design rctbayespower_design object defines study design condition_values named list element contains vectors parameter values vary across conditions. combinations created. static_values named list parameter values remain constant across conditions","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Conditions for Power Analysis — build_conditions","text":"rctbayespower_conditions object containing: conditions_grid data.frame parameter combinations condition_arguments list argument lists condition, separated simulation interim analysis arguments design original rctbayespower_design object","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Conditions for Power Analysis — build_conditions","text":"function performs several validation steps: Checks condition_values static_values overlapping names Validates required parameters provided Ensures p_alloc properly specified list Creates expanded grid condition combinations","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Conditions for Power Analysis — build_conditions","text":"","code":"if (FALSE) { # \\dontrun{ # Create conditions for sample size and effect size analysis conditions <- build_conditions(   design = my_design,   condition_values = list(     n_total = c(100, 200, 300),     effect_size = c(0.2, 0.5, 0.8)   ),   static_values = list(     p_alloc = list(c(0.5, 0.5)),     baseline_effect = 0.1   ) )  # Print the conditions print(conditions) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an rctbayespower_design Object — build_design","title":"Create an rctbayespower_design Object — build_design","text":"Constructs rctbayespower_design object combines rctbayespower_model analysis configuration parameters Bayesian power analysis. object encapsulates information needed conduct power simulations.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an rctbayespower_design Object — build_design","text":"","code":"build_design(   model = NULL,   target_params = NULL,   n_interim_analyses = NULL,   thresholds_success = NULL,   thresholds_futility = NULL,   p_sig_success = NULL,   p_sig_futility = NULL,   interim_function = NULL,   design_name = NULL )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an rctbayespower_design Object — build_design","text":"model object class \"rctbayespower_model\" created build_model() predefined model functions target_params Character vector specifying model parameters analyze power. Must valid parameter names brms model (e.g., \"b_arms_treat\" treatment effect) n_interim_analyses Number interim analyses planned study. Use 0 studies final analysis. Must non-negative integer. thresholds_success Numeric vector success thresholds target parameter. Length must match target_params. represent minimum clinically meaningful effect sizes. thresholds_futility Numeric vector futility thresholds target parameter. Length must match target_params. represent effect sizes treatment considered ineffective. p_sig_success Probability threshold declaring success. posterior probability effect exceeds success threshold must greater value declare success (typically 0.975 0.95). p_sig_futility Probability threshold declaring futility. posterior probability effect futility threshold must greater value declare futility (typically 0.5). interim_function Optional function adaptive interim analyses. provided, must accept interim_parameters argument defined call list(). Currently fully implemented. design_name Optional character string providing descriptive name design","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an rctbayespower_design Object — build_design","text":"object class \"rctbayespower_design\" containing elements model plus analysis configuration. Key components include: data_simulation_fn Data simulation function model brms_model Compiled brms model template target_params Target parameters analysis thresholds_success Success thresholds thresholds_futility Futility thresholds p_sig_success Success probability threshold p_sig_futility Futility probability threshold","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an rctbayespower_design Object — build_design","text":"rctbayespower_design class combines model specifications analysis decision criteria: Model Integration: Inherits data simulation function, compiled brms model, metadata model object. Decision Thresholds: Success futility thresholds define regions practical equivalence (ROPE) decision making. Effects success threshold considered clinically meaningful, effects futility threshold suggest treatment ineffectiveness. Probability Thresholds: p_sig_success p_sig_futility parameters control certainty required decisions. Higher values require stronger evidence. Validation: parameters validated consistency underlying model structure .","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an rctbayespower_design Object — build_design","text":"","code":"if (FALSE) { # \\dontrun{ # Create an ANCOVA model ancova_model <- build_model_ancova_cont()  # Create a design for analyzing treatment effect my_design <- build_design(   model = ancova_model,   target_params = \"b_arms_treat\",   n_interim_analyses = 0,   thresholds_success = 0.2,   thresholds_futility = 0,   p_sig_success = 0.975,   p_sig_futility = 0.5,   design_name = \"ANCOVA Treatment Effect Analysis\" ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an build_model Object — build_model","title":"Create an build_model Object — build_model","text":"Constructs build_model object encapsulates data simulation function, compiled brms model, associated metadata power analysis. object serves foundation Bayesian power analysis RCTs.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an build_model Object — build_model","text":"","code":"build_model(   pre_defined_model = NULL,   data_simulation_fn,   brms_model,   n_endpoints = NULL,   endpoint_types = NULL,   n_arms = NULL,   n_repeated_measures = NULL,   model_name = NULL )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an build_model Object — build_model","text":"pre_defined_model Optional character string specifying predefined model use instead creating custom model. Currently supported values: \"ancova_cont\" - ANCOVA model continuous outcomes baseline covariate specified, parameters ignored predefined model returned. data_simulation_fn function simulates data RCT. Must take parameters n_total, p_alloc, parameters needed data simulation. brms_model fitted brmsfit object serves template model. compiled without posterior draws (chains = 0) efficiency. n_endpoints Number endpoints study (must positive integer) endpoint_types Character vector specifying type endpoint. Valid types \"continuous\", \"binary\", \"count\". Length must match n_endpoints. n_arms Number arms study including control arm (must positive integer) n_repeated_measures Number repeated measures per participant. Use NULL 0 single time point studies. model_name Optional character string providing descriptive name model","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an build_model Object — build_model","text":"object class \"build_model\" containing: data_simulation_fn provided data simulation function brms_model compiled brms model template object following attributes: model_name Descriptive name model n_endpoints Number study endpoints endpoint_types Types endpoints n_arms Number arms including control arm n_repeated_measures Number repeated measures parameter_names_sim_fn Parameter names extracted simulation function parameter_names_brms Parameter names brms model","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an build_model Object — build_model","text":"build_model class encapsulates components needed power analysis simulation: Predefined Models: convenience, users can specify pre_defined_model use ready-made model configurations. recommended approach standard analyses. using predefined models, parameters ignored. Custom Models: advanced users, custom models can created providing required parameters: Data Simulation Function: Must accept n_total (total sample size), p_alloc (vector allocation probabilities), true_parameter_values (named list parameter values). function return data.frame simulated baseline data ready outcome generation. BRMS Model: compiled brms model used template. model fitted minimal chains (e.g., chains = 0) serve compilation template . Validation: function validates data simulation function required parameter structure brms model properly fitted.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an build_model Object — build_model","text":"","code":"if (FALSE) { # \\dontrun{ # Method 1: Use predefined model (recommended) ancova_model <- build_model(pre_defined_model = \"ancova_cont\") } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":null,"dir":"Reference","previous_headings":"","what":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"Creates build_model object ANCOVA (Analysis Covariance) flexible specifications number arms, contrasts, allocation ratios, parameters. general function underlies ANCOVA model variants package.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"","code":"build_model_ancova(   prior_intercept = NULL,   prior_sigma = NULL,   prior_covariate = NULL,   prior_treatment = NULL,   n_arms = NULL,   contrasts = NULL,   p_alloc = NULL,   intercept = NULL,   b_arm_treat = NULL,   b_covariate,   sigma = NULL )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"prior_intercept Prior intercept parameter. NULL (default), uses normal(0, 10). Must brmsprior object created brms::set_prior(). prior_sigma Prior residual standard deviation. NULL (default), uses normal(0, 10). Must brmsprior object created brms::set_prior(). prior_covariate Prior covariate effect. NULL (default), uses student_t(3, 0, 1). Must brmsprior object created brms::set_prior(). prior_treatment Prior treatment effect. NULL (default), uses student_t(3, 0, 1). Must brmsprior object created brms::set_prior(). n_arms Number arms trial (must >= 2). Required parameter. contrasts Contrast method treatment arms. Either character string (e.g., \"contr.treatment\", \"contr.sum\") contrast matrix. Required parameter. p_alloc Numeric vector allocation probabilities summing 1. Length must equal n_arms. Required parameter. intercept Intercept value data generation. Required parameter. b_arm_treat Treatment effect coefficients data generation. Vector length must equal n_arms - 1. Required parameter. b_covariate Covariate effect coefficient data generation. Required parameter. sigma Residual standard deviation data generation (must > 0). Required parameter.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"object class \"build_model\" ready use build_design() power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"function creates complete ANCOVA model following structure: Model Formula: outcome ~ 1 + covariate + arm Data Structure: generated data includes: covariate: Standardized normal covariate arm: Factor levels \"ctrl\" treatment arms (\"treat_1\", \"treat_2\", etc.) outcome: Continuous outcome generated linear model Parameters: model includes parameters intercept, covariate effect, treatment effects, residual standard deviation (sigma). Model Compilation: function compiles brms model creation, may take time enables efficient power analysis later. Convenience Functions: common use cases, consider wrapper functions can called via 'predefined_model' argument build_model(): build_model_ancova_cont_2arms() - 2-arm continuous ANCOVA build_model_ancova_cont_3arms() - 3-arm continuous ANCOVA","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"","code":"if (FALSE) { # \\dontrun{ # Create 2-arm ANCOVA model model_2arm <- build_model_ancova(   n_arms = 2,   contrasts = \"contr.treatment\",   p_alloc = c(0.5, 0.5),   intercept = 0,   b_arm_treat = 0.5,   b_covariate = 0.3,   sigma = 1 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"Creates 2-arm ANCOVA model sensible defaults continuous outcomes. convenience wrapper around build_model_ancova().","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"","code":"build_model_ancova_cont_2arms(...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"... Additional arguments passed build_model_ancova(). Can override default parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"object class \"build_model\" ready use build_design() power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"Default parameters: n_arms = 2 contrasts = \"contr.treatment\" p_alloc = c(0.5, 0.5) (equal allocation) intercept = 0 b_arm_treat = NULL (must specified) b_covariate = NULL (must specified) sigma = 1","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"","code":"if (FALSE) { # \\dontrun{ # Create 2-arm ANCOVA model (must specify effect sizes) model_2arm <- build_model_ancova_cont_2arms(   b_arm_treat = 0.5,   b_covariate = 0.3 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"Creates 3-arm ANCOVA model sensible defaults continuous outcomes. convenience wrapper around build_model_ancova().","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"","code":"build_model_ancova_cont_3arms(...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"... Additional arguments passed build_model_ancova(). Can override default parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"object class \"build_model\" ready use build_design() power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"Default parameters: n_arms = 3 contrasts = \"contr.treatment\" p_alloc = c(1/3, 1/3, 1/3) (equal allocation) intercept = 0 b_arm_treat = NULL (must specified, length 2) b_covariate = NULL (must specified) sigma = 1","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"","code":"if (FALSE) { # \\dontrun{ # Create 3-arm ANCOVA model (must specify effect sizes) model_3arm <- build_model_ancova_cont_3arms(   b_arm_treat = c(0.5, 0.7),   b_covariate = 0.3 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"Calculate Monte Carlo Standard Error integrated power metrics combine results across multiple effect sizes sample sizes using weighted averages.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"","code":"calculate_mcse_integrated_power(   values,   weights,   n_simulations,   is_power_metric = TRUE )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"values Vector power probability values weights Vector weights integration n_simulations Total number simulations is_power_metric Logical indicating power metric (TRUE) probability metric (FALSE)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"Monte Carlo Standard Error integrated metric","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"Calculate Monte Carlo Standard Error continuous metrics like mean probabilities.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"","code":"calculate_mcse_mean(values, n_simulations)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"values Vector continuous values n_simulations Total number simulations","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"Monte Carlo Standard Error","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"Calculate Monte Carlo Standard Error power metrics based simulation results. MCSE provides estimate uncertainty power estimates due Monte Carlo sampling.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"","code":"calculate_mcse_power(successes, n_simulations)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"successes Vector success indicators (TRUE/FALSE 1/0) n_simulations Total number simulations","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"Monte Carlo Standard Error","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"function extracts posterior samples fitted brms model computes various power analysis measures including success/futility probabilities, significance indicators, parameter estimates, convergence diagnostics. multiple target parameters, also computes combined (union) measures.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"","code":"compute_measures_brmsfit(brmsfit, design)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"brmsfit fitted brms model object containing posterior samples design list containing experimental design specification following components: target_params: Character vector parameter names analyze thresholds_success: Numeric vector success thresholds parameter thresholds_futility: Numeric vector futility thresholds parameter p_sig_success: Probability threshold declaring success significance p_sig_futility: Probability threshold declaring futility significance","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"data frame containing power analysis measures following columns: parameter: Parameter name \"union\" combined measures threshold_success: Success threshold used parameter threshold_futility: Futility threshold used parameter success_prob: Probability parameter exceeds success threshold futility_prob: Probability parameter falls futility threshold sig_success: Binary indicator (1/0) success probability meets significance threshold sig_futility: Binary indicator (1/0) futility probability meets significance threshold est_median: Posterior median estimate parameter est_mad: Posterior median absolute deviation parameter est_mean: Posterior mean estimate parameter est_sd: Posterior standard deviation parameter rhat: R-hat convergence diagnostic ess_bulk: Effective sample size bulk estimates ess_tail: Effective sample size tail estimates","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"single parameters, function computes individual measures. multiple target parameters, additionally computes combined (union) measures success requires parameters exceed respective success thresholds simultaneously, futility requires parameters fall respective futility thresholds. threshold vectors shorter number target parameters, first threshold value recycled additional parameters.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # Assume you have a fitted brms model and design specification design <- list(   target_params = c(\"b_arms_treat\", \"b_Intercept\"),   thresholds_success = c(0.2, 0.0),   thresholds_futility = c(0.0, 0.0),   p_sig_success = 0.975,   p_sig_futility = 0.95 ) measures <- compute_measures_brmsfit(fitted_model, design) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Function Arguments Without Default Values — get_arg_defaults","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"Extracts names function arguments default values. utility function used identifying required parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"","code":"get_arg_defaults(fn)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"fn function object analyze","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"character vector containing names arguments without default values","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Function Arguments Without Default Values — get_args_without_defaults","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"Internal utility function extracts names function arguments default values (either missing explicitly NULL).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"","code":"get_args_without_defaults(fn)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"fn function object analyze","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"character vector containing names arguments without default values","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and Validate Design Prior — parse_design_prior","title":"Parse and Validate Design Prior — parse_design_prior","text":"Internal helper function parse design prior specifications create weight quantile functions design prior integration.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and Validate Design Prior — parse_design_prior","text":"","code":"parse_design_prior(design_prior, effect_sizes, verbose = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and Validate Design Prior — parse_design_prior","text":"design_prior Design prior specification (string function) effect_sizes Vector effect sizes coverage checking verbose Whether print parsing information (default: TRUE)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and Validate Design Prior — parse_design_prior","text":"List containing weight_fn, quantile_fn, weight_type","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbayespower_sim_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Power Analysis Results — plot.rctbayespower_sim_result","title":"Plot Power Analysis Results — plot.rctbayespower_sim_result","text":"Create comprehensive visualizations power analysis results power_analysis(). Supports different plot types based analysis type (sample_only, effect_only, varying).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbayespower_sim_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Power Analysis Results — plot.rctbayespower_sim_result","text":"","code":"# S3 method for class 'rctbayespower_sim_result' plot(   x,   type = \"auto\",   metric = \"both\",   values = \"both\",   show_target = TRUE,   show_integrated = TRUE,   facet_by = \"effect_size\",   design_prior = NULL,   ... )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbayespower_sim_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Power Analysis Results — plot.rctbayespower_sim_result","text":"x object class 'rctbayespower_sim_result' returned power_analysis() type Type plot create: \"auto\" - Automatically detect best plot type based analysis (default) \"power_curve\" - Power curve across single varying dimension \"heatmap\" - 2D heatmap sample sizes effect sizes vary \"integrated\" - Integrated power results design prior used \"comparison\" - Compare power vs posterior probabilities metric power metric display: \"success\" - Success power probability \"futility\" - Futility power probability \"\" - success futility power probabilities (default) values values display: \"\" - power posterior probabilities (default) \"power\" - Power \"post_prob\" - Posterior probabilities show_target Whether show target power lines (default: TRUE) show_integrated Whether include integrated power available (default: TRUE) facet_by power_curve plots sample sizes effect sizes vary: \"effect_size\" - Facet effect size, vary sample size x-axis (default) \"sample_size\" - Facet sample size, vary effect size x-axis design_prior Optional design prior runtime integrated power computation. Can : string brms prior syntax (e.g., \"normal(0.3, 0.1)\", \"student_t(6, 0.5, 0.2)\") R function taking effect size input (e.g., function(x) dnorm(x, 0.5, 0.2)) NULL runtime integration (default) provided, integrated power computed using design prior instead design prior specified original power_analysis() call. valid effect sizes vary (length > 1). ... Additional arguments passed ggplot2 functions","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbayespower_sim_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Power Analysis Results — plot.rctbayespower_sim_result","text":"ggplot2 object","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Analysis for Bayesian RCTs (New API) — power_analysis","title":"Power Analysis for Bayesian RCTs (New API) — power_analysis","text":"Comprehensive power analysis across multiple conditions using new object-oriented API. function provides flexible power analysis varying sample sizes, effect sizes, interim analyses, parameters across grid conditions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Analysis for Bayesian RCTs (New API) — power_analysis","text":"","code":"power_analysis(   conditions,   design_prior = NULL,   n_simulations = 500,   n_cores = 1,   n_progress_updates = 10,   verbose = FALSE,   brms_args = list(),   ... )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Analysis for Bayesian RCTs (New API) — power_analysis","text":"conditions conditions object created build_conditions() containing: design: rctbayespower_design object model specifications condition_arguments: List prepared condition arguments simulation design_prior Optional design prior integrated power computation. Can : string brms prior syntax (e.g., \"normal(0.3, 0.1)\", \"student_t(6, 0.5, 0.2)\") R function taking effect size input (e.g., function(x) dnorm(x, 0.5, 0.2)) NULL design prior (default) n_simulations Number MCMC iterations per condition (default: 500) n_cores Number parallel cores condition execution (default: 1) n_progress_updates Show progress every N conditions running sequentially (default: 10) verbose Logical. Whether show detailed progress information (default: FALSE) brms_args Arguments passed brms model fitting. Default includes 'algorithm' = \"sampling\", 'iter' = 500, 'warmup' = 250, 'chains' = 4, 'cores' = 1. User can override add additional arguments. ... Additional arguments passed brms model fitting. highest priority override defaults 'brms_args'.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Analysis for Bayesian RCTs (New API) — power_analysis","text":"list class \"rctbayespower_sim_result\" containing: design: design object used analysis conditions: condition specifications used target_power_success: Target power level success target_power_futility: Target power level futility power_surface: Data frame power results conditions optimal_combinations_success: Conditions achieving target success power optimal_combinations_futility: Conditions achieving target futility power sample_sizes: Unique sample sizes tested unique_effect_combinations: Unique effect size combinations tested detailed_results: Full simulation results condition","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power Analysis for Bayesian RCTs (New API) — power_analysis","text":"implementation optimized performance : Direct index-based parallel execution (intermediate data structures) Efficient data combination using dplyr::bind_rows Minimal console output (controlled verbose parameter) Simplified cluster setup without OS detection overhead modernized function uses new object-oriented API provides several advantages: Unified Parameter Management: model analysis specifications contained rctbayespower_design object, ensuring consistency reducing parameter errors. Flexible Condition Specification: Conditions can vary combination sample sizes, effect sizes, interim analyses, allocation ratios, parameters independently. Full Parallelization: conditions executed parallel n_cores > 1, maximizing computational efficiency across entire parameter grid. Named Effect Sizes: Effect sizes must specified named lists matching target_params design object, enabling multi-parameter analysis. Extensible Design: Easy add new condition parameters (e.g., interim analyses) without changing function signature.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Analysis for Bayesian RCTs (New API) — power_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Create an ANCOVA model and design ancova_model <- build_model(\"ancova_cont_2arms\")() design <- build_design(   build_model = ancova_model,   target_params = \"b_arms_treat\",   n_interim_analyses = 0,   thresholds_success = 0.2,   thresholds_futility = 0.0,   p_sig_success = 0.975,   p_sig_futility = 0.5 )  # Create conditions grid conditions <- expand_conditions(   sample_sizes = c(100),   b_arms_treat = c(0.5), )  # Run power analysis result <- power_analysis(   conditions = conditions,   n_simulations = 10, # Low for example   n_cores = 1 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for rctbayespower_conditions Objects — print.rctbayespower_conditions","title":"Print Method for rctbayespower_conditions Objects — print.rctbayespower_conditions","text":"Prints formatted summary condition grids created build_conditions(). Shows condition grid parameter combinations provides summary information number conditions parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for rctbayespower_conditions Objects — print.rctbayespower_conditions","text":"","code":"# S3 method for class 'rctbayespower_conditions' print(x, ...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for rctbayespower_conditions Objects — print.rctbayespower_conditions","text":"x rctbayespower_conditions object created build_conditions() ... Additional arguments passed print()","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for rctbayespower_conditions Objects — print.rctbayespower_conditions","text":"Invisibly returns input object","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for rctbayespower_conditions Objects — print.rctbayespower_conditions","text":"","code":"if (FALSE) { # \\dontrun{ conditions <- build_conditions(design, condition_values, static_values) print(conditions) # or just: conditions } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for rctbayespower_design Objects — print.rctbayespower_design","title":"Print Method for rctbayespower_design Objects — print.rctbayespower_design","text":"Displays comprehensive summary rctbayespower_design object, showing model specifications analysis configuration organized format.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for rctbayespower_design Objects — print.rctbayespower_design","text":"","code":"# S3 method for class 'rctbayespower_design' print(x, ...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for rctbayespower_design Objects — print.rctbayespower_design","text":"x object class \"rctbayespower_design\" ... Additional arguments (currently unused)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for rctbayespower_design Objects — print.rctbayespower_design","text":"Invisibly returns input object. Used side effects (printing).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for build_model Objects — print.rctbayespower_model","title":"Print Method for build_model Objects — print.rctbayespower_model","text":"Displays summary build_model object, including model specifications, parameter information, function details.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for build_model Objects — print.rctbayespower_model","text":"","code":"# S3 method for class 'rctbayespower_model' print(x, ...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for build_model Objects — print.rctbayespower_model","text":"x object class \"build_model\" ... Additional arguments (currently unused)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbayespower_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for build_model Objects — print.rctbayespower_model","text":"Invisibly returns input object. Used side effects (printing).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/rctbayespower-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'rctbayespower' package. — rctbayespower-package","title":"The 'rctbayespower' package. — rctbayespower-package","text":"Bayesian power analysis randomized controlled trials (RCTs) using brms Stan. Provides tools estimating power curves, determining optimal sample sizes, incorporating prior knowledge treatment effects using region practical equivalence (ROPE) decision making.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/rctbayespower-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"The 'rctbayespower' package. — rctbayespower-package","text":"power_analysis() Comprehensive power analysis varying sample sizes effect sizes build_model() Create model specifications power analysis build_design() Create experimental design configurations build_conditions() Generate analysis conditions design parameters simulate_single_run() Execute single simulation run power analysis validate_weighting_function() Testing weighting function implementations plot.rctbayespower_sim_result() Visualization power analysis results","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/rctbayespower-package.html","id":"key-features","dir":"Reference","previous_headings":"","what":"Key Features","title":"The 'rctbayespower' package. — rctbayespower-package","text":"Design prior integration weighted power computation Comprehensive plotting system multiple visualization options Robust parallelization proper parameter handling ANCOVA models baseline covariate support","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/rctbayespower-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'rctbayespower' package. — rctbayespower-package","text":"Maintainer: Matthias Kloft kloft.dev+rctbayespower@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Required Parameters for Design or Model Objects — required_fn_args","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"Generic wrapper function identifies required parameters either rctbayespower_design rctbayespower_model objects dispatching appropriate specific function.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"","code":"required_fn_args(object, print = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"object Either rctbayespower_design rctbayespower_model object print Logical. TRUE (default), prints required parameters console","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"design objects: list simulation, interim, parameters. model objects: character vector required parameters. returned invisibly.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"","code":"if (FALSE) { # \\dontrun{ required_fn_args(my_object) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Required Parameters for a Design — required_fn_args_design","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"Extracts required parameters (without default values) data simulation function interim analysis function rctbayespower design object. helps users identify parameters must specified running simulations.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"","code":"required_fn_args_design(design, print = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"design rctbayespower_design object print Logical. TRUE (default), prints required parameters console","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"character vector containing names required parameters","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Required Parameters for a Model — required_fn_args_model","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"Extracts required parameters (without default values) data simulation function rctbayespower model object.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"","code":"required_fn_args_model(model, print = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"model rctbayespower_model object print Logical. TRUE (default), prints required parameters console","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"character vector containing names required parameters (returned invisibly)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"Executes single simulation run using pre-validated condition arguments. function core simulation engine used power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"","code":"simulate_single_run(condition_arguments, id_sim, design, brms_args = list())"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"condition_arguments single entry condition_arguments list created build_conditions(). Contains 'sim_args' 'n_total', 'p_alloc', 'true_parameter_values', plus optional 'interim_args'. id_sim Simulation identifier tracking individual simulation runs design rctbayespower_design object containing simulation model specifications brms_args Arguments passed brms model fitting. Default includes 'algorithm' = \"sampling\", 'iter' = 500, 'warmup' = 250, 'chains' = 4, 'cores' = 1. User can override add additional arguments.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"fitted brms model object success, NULL failure","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"","code":"if (FALSE) { # \\dontrun{ # Create model, design, and conditions ancova_model <- build_model(\"ancova_cont_2arms\")() design <- build_design(   model = ancova_model,   target_params = \"b_arms_treat\",   n_interim_analyses = 0,   thresholds_success = 0.2,   thresholds_futility = 0,   \"p_sig_success\" = 0.975,   \"p_sig_futility\" = 0.5 )  conditions <- build_conditions(   design = design,   condition_values = list(n_total = c(100, 200)),   static_values = list(     p_alloc = list(c(0.5, 0.5)),     true_parameter_values = list(       intercept = 0,       sigma = 1,       b_arms_treat = 0.5,       b_covariate = 0.2     )   ) )  # Simulate single condition with default brms settings result <- simulate_single_run(   condition_arguments = conditions$condition_arguments[[1]],   design = conditions$design )  # Or with custom brms arguments result_custom <- simulate_single_run(   condition_arguments = conditions$condition_arguments[[1]],   design = conditions$design,   brms_args = list(algorithm = \"meanfield\", iter = 1000) ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Power Analysis Simulation Results — summarize_sims","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"function aggregates raw simulation results across multiple runs compute summary statistics including power estimates, parameter estimates, convergence metrics, Monte Carlo standard errors.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"","code":"summarize_sims(results_df_raw, n_simulations)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"results_df_raw data frame containing raw simulation results columns: id_cond: Condition identifier parameter: Parameter name threshold_success: Success threshold parameter threshold_futility: Futility threshold parameter success_prob: Probability success simulation futility_prob: Probability futility simulation sig_success: Binary success significance indicator sig_futility: Binary futility significance indicator est_median: Posterior median estimates est_mad: Posterior median absolute deviation est_mean: Posterior mean estimates est_sd: Posterior standard deviation rhat: R-hat convergence diagnostic ess_bulk: Bulk effective sample size ess_tail: Tail effective sample size converged: Convergence status indicator error: Error messages () n_simulations Integer specifying total number simulations run","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"data frame summarized results grouped condition parameter, containing mean estimates Monte Carlo standard errors (MCSE) metrics: Power estimates: pow_success, pow_futility Probability estimates: success_prob, futility_prob Parameter estimates: est_median, est_mean, est_mad, est_sd Convergence metrics: rhat, ess_bulk, ess_tail, convergence_rate Error summary: error metric includes corresponding _mcse columns Monte Carlo standard errors.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"function groups results condition ID, parameter, thresholds, computes: Mean values across simulations continuous metrics Power proportion simulations meeting significance criteria Convergence rate proportion successfully converged simulations Monte Carlo standard errors uncertainty quantification Concatenated error messages debugging purposes","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Weighting Function Implementation — validate_weighting_function","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"Tests weighting function parsing computation power_analysis() works correctly. function validates brms syntax parsing R function handling, well weighted power computation logic.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"","code":"validate_weighting_function(effect_sizes = seq(0.2, 0.8, 0.1), verbose = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"effect_sizes Vector effect sizes test (default: seq(0.2, 0.8, 0.1)) verbose Whether print detailed test results (default: TRUE)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"list containing validation results: all_tests_passed: Boolean indicating tests passed test_results: List individual test results errors: errors encountered testing","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"validation function tests: Normal distribution parsing brms syntax Student-t distribution parsing brms syntax Custom R function validation Weight normalization (ensures weights sum 1) Quantile computation coverage checking Error handling invalid inputs","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"development-status-0-1-0","dir":"Changelog","previous_headings":"","what":"Development Status","title":"rctbayespower 0.1.0 (Development Version)","text":"⚠️ package currently active development yet released.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"Development Status","what":"New Features","title":"rctbayespower 0.1.0 (Development Version)","text":"power_analysis(): Main function Bayesian power analysis using object-oriented API build_model(): Create model specifications power analysis build_design(): Create experimental design configurations build_conditions(): Generate analysis conditions design parameters simulate_single_run(): Execute single simulation run power analysis build_model(\"ancova_cont_2arms\")(): ANCOVA model continuous outcomes baseline covariates Continuous outcomes Cohen’s d effect sizes (via ANCOVA models) ROPE Power: Probability effect outside region practical equivalence Directional Power: Probability effect expected direction Significance Power: Traditional frequentist-like power Design prior integration weighted power computation using brms syntax Model caching system performance optimization Comprehensive parallelization support Flexible ROPE (Region Practical Equivalence) limits Object-oriented API consistent parameter management plot.rctbayespower_sim_result(): Comprehensive plotting system multiple visualization types Automatic plot type detection based analysis conditions Power curves, heatmaps, integrated plots, comparison plots Publication-ready plots customizable themes Three comprehensive vignettes covering basic usage, prior specification, algorithm performance Extensive function documentation examples Complete README quick start guide","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"dependencies-0-1-0","dir":"Changelog","previous_headings":"Development Status","what":"Dependencies","title":"rctbayespower 0.1.0 (Development Version)","text":"Requires R >= 4.1.0 Integrates brms Bayesian model fitting Plotting capabilities via ggplot2 Data manipulation dplyr, tidyr, purrr Parallelization support via parallel package","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"api-design-0-1-0","dir":"Changelog","previous_headings":"Development Status","what":"API Design","title":"rctbayespower 0.1.0 (Development Version)","text":"package uses object-oriented approach requiring users : 1. Build model specifications using build_model() pre-built models 2. Create experimental designs build_design() 3. Generate analysis conditions build_conditions() 4. Execute power analysis power_analysis()","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"development-status--known-issues-0-1-0","dir":"Changelog","previous_headings":"Development Status","what":"Development Status & Known Issues","title":"rctbayespower 0.1.0 (Development Version)","text":"Core functionality: Fully implemented working ✅ Documentation: Significant gaps remain - vignettes need complete rewriting new API ⚠️ Testing: Test suite incomplete - test files contain TODO comments ⚠️ Missing features: Binary count outcomes referenced docs implemented Model caching: Provides significant performance improvements grid analyses ✅ Package structure: Follows standard R package development practices ✅","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"development-notes-0-1-0","dir":"Changelog","previous_headings":"Development Status","what":"Development Notes","title":"rctbayespower 0.1.0 (Development Version)","text":"package developed LLM assistance requires thorough testing production use vignettes currently reference deprecated function names need updating Test coverage currently 0% - comprehensive testing needed Documentation inconsistencies exist old new API","code":""}]
