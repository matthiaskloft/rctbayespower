[{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"rctbayespower R package conducting Bayesian power analysis randomized controlled trials (RCTs) using brms Stan. package provides tools estimating power curves, determining optimal sample sizes, incorporating prior knowledge treatment effects using region practical equivalence (ROPE) decision making.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"current-status-updated---2025-07-21","dir":"","previous_headings":"","what":"Current Status (Updated - 2025-07-21)","title":"CLAUDE.md","text":"Core Package State: Functional stable core documentation lag ✅ IMPLEMENTED FEATURES - Object-Oriented API: Core Functions (100% Complete & Working): - build_model() - Create model specifications power analysis - build_design() - Create experimental design configurations - build_conditions() - Generate analysis conditions design parameters - simulate_single_run() - Execute single simulation run power analysis Pre-built Models: - build_model(\"ancova_cont_2arms\")() - ANCOVA model continuous outcomes ✅ - : build_model_ancova() generalized version wrappers specific defaults Advanced Features (100% Complete): - Design Prior Integration - Supports brms syntax comprehensive fallback hierarchy - Integrated Power Computation - Weighted power across effect sizes using priors - Sophisticated Parallelization - Robust parallel processing parameter preservation - Comprehensive Plotting - Multiple visualization types auto-detection - Model Caching - Significant performance improvements grid analyses S3 Methods (100% Complete): - plot.rctbayespower_sim_result() - Visualization power analysis results - print.rctbayespower_*() methods object types ⚠️ INCOMPLETE FEATURES: Documentation Inconsistencies (Critical): - Vignettes: Still reference non-existent power_analysis_ancova() function - need complete rewriting - Manual pages: still reference old function names - vignettes need updating new API Test Suite (0% Complete): - Status: test files contain TODO comments - Impact: automated testing coverage - Files: 4 test files placeholder content Missing Outcome Types: - Binary outcomes - Referenced old docs never implemented - Count outcomes - Referenced old docs never implemented Current Production-Ready Workflow:","code":"# 1. Create model → 2. Create design → 3. Create conditions → 4. Run analysis model_ancova <- build_model(\"ancova_cont_2arms\")() design <- build_design(model, target_params, thresholds, p_sig) conditions <- build_conditions(design, condition_values, static_values) power_config <- rctbp_power_analysis(conditions = conditions, n_cores = n_cores, n_sims = n_sims) result <- run(power_config)"},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"documentation-guidelines","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Documentation Guidelines","title":"CLAUDE.md","text":"Always update documentations directly .R file’s roxygen documentation CRITICAL: updating roxygen comments, run devtools::document() regenerate .Rd files Never manually edit .Rd files man/ directory - auto-generated edit README.Rmd file, README.md file get build later.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"documentation-best-practices","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Documentation Best Practices","title":"CLAUDE.md","text":"Examples documentation function need short concise possible one variant function demonstrated function extended run time","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"id_1-avoiding-documentation-mismatches","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines > R CMD Check Best Practices","what":"1. Avoiding Documentation Mismatches","title":"CLAUDE.md","text":"Problem: R CMD check fails default parameter values code don’t match roxygen documentation. Solution: Always ensure roxygen @param documentation matches actual default values function signatures. Example Fix: Recent fixes applied: Updated documentation p_sig_success power_analysis.R, class system fixes throughout package.","code":"# BAD: Code has default = 0.975 but docs say 0.95 #' @param p_sig_success Probability threshold for success (default 0.95) my_function <- function(p_sig_success = 0.975) { ... }  # GOOD: Documentation matches code #' @param p_sig_success Probability threshold for success (default 0.975)  my_function <- function(p_sig_success = 0.975) { ... }"},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"documentation-conventions","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Documentation Conventions","title":"CLAUDE.md","text":"Don’t use  roxygen docs. Use [functionname()] instead.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/CLAUDE.html","id":"code-writing-guidelines","dir":"","previous_headings":"Development Practices and R CMD Check Guidelines","what":"Code Writing Guidelines","title":"CLAUDE.md","text":"Always wrap argument names quotes displaying printed output stop(), warning(), message(), documentation. improves clarity avoids confusion actual values natural language.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with 'rctbayespower'","text":"rctbayespower package provides tools conducting Bayesian power analysis randomized controlled trials (RCTs) using brms package Stan.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"model","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Model","title":"Getting Started with 'rctbayespower'","text":"Show predefined models available package: Get predefined ANCOVA model continuous outcomes two arms:","code":"list_predefined_models() #> [1] \"ancova_cont_2arms\" \"ancova_cont_3arms\" model_ancova <- build_model(predefined_model = \"ancova_cont_2arms\") model_ancova@parameter_names_brms #> [1] \"b_Intercept\" \"b_covariate\" \"b_arm2\""},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"design","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Design","title":"Getting Started with 'rctbayespower'","text":"Find possible target parameters model. Specify study design target parameter, thresholds success futility, significance levels frequentist-like power.","code":"model_ancova@parameter_names_brms #> [1] \"b_Intercept\" \"b_covariate\" \"b_arm2\" design <- build_design(   model = model_ancova,   target_params = \"b_arm2\",   thresholds_success = 0.1,   thresholds_futility = 0,   p_sig_success = 0.9,   p_sig_futility = 0.5 ) print(design) #>  #> S7 Object of class: 'rctbp_design' #> -------------------------------------------------- #>  #> === Model Specifications === #>  #> Number of endpoints: 1  #> Endpoint types: continuous  #> Number of arms: 2  #> Number of repeated measures: 0  #> Parameter names - simulation function: n_total, n_arms, contrasts, p_alloc, intercept, b_arm_treat, b_covariate, sigma  #> Parameter names - brms model: b_Intercept, b_covariate, b_arm2  #>  #> === Design Specifications === #>  #> Design name: NULL  #> Target parameters: b_arm2  #> Number of interim analyses: 0  #> Thresholds for success: 0.1  #> Thresholds for futility: 0  #> Probability of success significance: 0.9  #> Probability of futility significance: 0.5  #> Parameter names - interim function: NULL  #>  #> === 'brms' Model === #>  #>  Family: gaussian  #>   Links: mu = identity  #> Formula: outcome ~ 1 + covariate + arm  #>    Data: mock_data_ancova (Number of observations: 20)  #>   Draws: 1 chains, each with iter = 500; warmup = 250; thin = 1; #>          total post-warmup draws = 250 #>  #> Regression Coefficients: #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept    -0.27      0.35    -0.94     0.36 1.00      269      140 #> covariate     0.07      0.26    -0.43     0.56 1.00      257      237 #> arm2          0.84      0.49    -0.13     1.75 1.00      314      202 #>  #> Further Distributional Parameters: #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     1.15      0.22     0.82     1.69 1.00      216      194 #>  #> Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"conditions","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design > Design","what":"Conditions","title":"Getting Started with 'rctbayespower'","text":"Find parameters need user specification design. Specify conditions.","code":"required_fn_args(design) #>  #> Arguments that need user specification. #>  #> Simulation function: #> n_total, b_arm_treat, b_covariate  #>  #> Interim function: #> conditions <- build_conditions(   design = design,   condition_values = list(     # two sample sizes     n_total = seq(80, 160, by = 40),     # two effect sizes     b_arm_treat = c(0, 0.3)   ),   static_values = list(     # baseline effect     b_covariate = 0   ) ) print(conditions, n = 100) #>  #> S7 Object of class: 'rctbp_conditions' #> -------------------------------------------------- #>  #> Number of conditions: 6  #> Number of varying parameters: 2  #> Number of static parameters: 1  #>  #> Condition Grid: #> # A tibble: 6 × 3 #>   id_cond n_total b_arm_treat #>     <int>   <dbl>       <dbl> #> 1       1      80         0   #> 2       2      80         0.3 #> 3       3     120         0   #> 4       4     120         0.3 #> 5       5     160         0   #> 6       6     160         0.3"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"run-power-analysis","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Run Power Analysis","title":"Getting Started with 'rctbayespower'","text":"Run analysis using power_analysis function. run model condition return results.","code":"power <- power_analysis(   conditions = conditions,   n_cores = n_cores,   n_sims = n_sims,   verbose = TRUE,   brms_args = list(     chains = 4,     # reduced number of iterations for vignette     iter = 300,     warmup = 100   ) ) #>  #> === Power Analysis === #> Conditions: #> # A tibble: 6 × 3 #>   id_cond n_total b_arm_treat #>     <int>   <dbl>       <dbl> #> 1       1      80         0   #> 2       2      80         0.3 #> 3       3     120         0   #> 4       4     120         0.3 #> 5       5     160         0   #> 6       6     160         0.3 #>  #> Conditions to test: 6  #> Simulations per condition: 1  #> Total simulations: 6  #>  #> Parallel execution using 4 cores: #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Combined results dimensions: 6 18  #> Column names: parameter, threshold_success, threshold_futility, success_prob, futility_prob, power_success, power_futility, median, mad, mean, sd, rhat, ess_bulk, ess_tail, id_sim, id_cond, converged, error  #>  #> Total analysis time: 5.88 minutes"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"power-for-effect-of-0-3","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Power for Effect of 0.3","title":"Getting Started with 'rctbayespower'","text":"","code":"power@summarized_results |>   dplyr::filter(b_arm_treat != 0) |>   dplyr::select(     n_total,     b_arm_treat,     prob_success,     prob_success_se,     power_success,     power_success_se,     prob_futility,     prob_futility_se,     power_futility,     power_futility_se   ) |>   dplyr::arrange(desc(b_arm_treat)) |>   kableExtra::kable(digits = 3, format = \"html\")"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"alpha-error-rate-for-null-effect","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Alpha Error Rate for Null Effect","title":"Getting Started with 'rctbayespower'","text":"power success indicates alpha error rate null effect (b_arm_treat = 0). probability rejecting null hypothesis true, close significance level (0.05) design well specified.","code":"power@summarized_results |>   dplyr::filter(b_arm_treat == 0) |>   dplyr::select(     n_total,     b_arm_treat,     prob_success,     prob_success_se,     power_success,     power_success_se,     power_futility,     power_futility_se,     prob_futility,     prob_futility_se   ) |>   dplyr::arrange(desc(b_arm_treat)) |>   kableExtra::kable(digits = 3,                     format = \"html\")"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"run-time","dir":"Articles","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Run Time","title":"Getting Started with 'rctbayespower'","text":"","code":"n_runs <- nrow(power@conditions@conditions_grid) * power@n_sims cat(\"Total run time:\", round(power@elapsed_time,1), \"minutes for\", n_runs, \"total simulation repetitions using\", power@n_cores, \"cores.\\n\") #> Total run time: 5.9 minutes for 6 total simulation repetitions using 4 cores."},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/01-introduction.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Getting Started with 'rctbayespower'","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] rctbayespower_0.0.0.9000 kableExtra_1.4.0         dplyr_1.1.4              #> [4] rmarkdown_2.30           #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6          tensorA_0.36.2.1      QuickJSR_1.8.1        #>  [4] xfun_0.53             ggplot2_4.0.0         htmlwidgets_1.6.4     #>  [7] processx_3.8.6        inline_0.3.21         lattice_0.22-7        #> [10] callr_3.7.6           ps_1.9.1              vctrs_0.6.5           #> [13] tools_4.5.1           generics_0.1.4        stats4_4.5.1          #> [16] parallel_4.5.1        tibble_3.3.0          pkgconfig_2.0.3       #> [19] brms_2.23.0           Matrix_1.7-3          data.table_1.17.8     #> [22] checkmate_2.3.3       RColorBrewer_1.1-3    S7_0.2.0              #> [25] distributional_0.5.0  RcppParallel_5.1.11-1 lifecycle_1.0.4       #> [28] compiler_4.5.1        farver_2.1.2          stringr_1.5.2         #> [31] textshaping_1.0.4     Brobdingnag_1.2-9     codetools_0.2-20      #> [34] htmltools_0.5.8.1     bayesplot_1.14.0      yaml_2.3.10           #> [37] lazyeval_0.2.2        plotly_4.11.0         pillar_1.11.1         #> [40] tidyr_1.3.1           StanHeaders_2.32.10   bridgesampling_1.1-2  #> [43] abind_1.4-8           nlme_3.1-168          posterior_1.6.1       #> [46] rstan_2.32.7          tidyselect_1.2.1      digest_0.6.37         #> [49] mvtnorm_1.3-3         stringi_1.8.7         reshape2_1.4.4        #> [52] purrr_1.1.0           fastmap_1.2.0         grid_4.5.1            #> [55] cli_3.6.5             magrittr_2.0.4        loo_2.8.0             #> [58] pkgbuild_1.4.8        withr_3.0.2           scales_1.4.0          #> [61] backports_1.5.0       httr_1.4.7            matrixStats_1.5.0     #> [64] gridExtra_2.3         coda_0.19-4.1         evaluate_1.0.5        #> [67] knitr_1.50            pwr_1.3-0             viridisLite_0.4.2     #> [70] rstantools_2.5.0      rlang_1.1.6           Rcpp_1.1.0            #> [73] glue_1.8.0            xml2_1.4.0            svglite_2.2.2         #> [76] rstudioapi_0.17.1     jsonlite_2.0.0        plyr_1.8.9            #> [79] R6_2.6.1              systemfonts_1.3.1"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"introduction","dir":"Articles > Src","previous_headings":"","what":"Introduction","title":"Getting Started with 'rctbayespower'","text":"rctbayespower package provides tools conducting Bayesian power analysis randomized controlled trials (RCTs) using brms package Stan.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"model","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Model","title":"Getting Started with 'rctbayespower'","text":"Show predefined models available package: Get predefined ANCOVA model continuous outcomes two arms:","code":"list_predefined_models() #> [1] \"ancova_cont_2arms\" \"ancova_cont_3arms\" model_ancova <- build_model(predefined_model = \"ancova_cont_2arms\") model_ancova@parameter_names_brms #> [1] \"b_Intercept\" \"b_covariate\" \"b_arm2\""},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"design","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Design","title":"Getting Started with 'rctbayespower'","text":"Find possible target parameters model. Specify study design target parameter, thresholds success futility, significance levels frequentist-like power.","code":"model_ancova@parameter_names_brms #> [1] \"b_Intercept\" \"b_covariate\" \"b_arm2\" design <- build_design(   model = model_ancova,   target_params = \"b_arm2\",   thresholds_success = 0.1,   thresholds_futility = 0,   p_sig_success = 0.9,   p_sig_futility = 0.5 ) print(design) #>  #> S7 Object of class: 'rctbp_design' #> -------------------------------------------------- #>  #> === Model Specifications === #>  #> Number of endpoints: 1  #> Endpoint types: continuous  #> Number of arms: 2  #> Number of repeated measures: 0  #> Parameter names - simulation function: n_total, n_arms, contrasts, p_alloc, intercept, b_arm_treat, b_covariate, sigma  #> Parameter names - brms model: b_Intercept, b_covariate, b_arm2  #>  #> === Design Specifications === #>  #> Design name: NULL  #> Target parameters: b_arm2  #> Number of interim analyses: 0  #> Thresholds for success: 0.1  #> Thresholds for futility: 0  #> Probability of success significance: 0.9  #> Probability of futility significance: 0.5  #> Parameter names - interim function: NULL  #>  #> === 'brms' Model === #>  #>  Family: gaussian  #>   Links: mu = identity  #> Formula: outcome ~ 1 + covariate + arm  #>    Data: mock_data_ancova (Number of observations: 20)  #>   Draws: 1 chains, each with iter = 500; warmup = 250; thin = 1; #>          total post-warmup draws = 250 #>  #> Regression Coefficients: #>           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> Intercept    -0.27      0.35    -0.94     0.36 1.00      269      140 #> covariate     0.07      0.26    -0.43     0.56 1.00      257      237 #> arm2          0.84      0.49    -0.13     1.75 1.00      314      202 #>  #> Further Distributional Parameters: #>       Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS #> sigma     1.15      0.22     0.82     1.69 1.00      216      194 #>  #> Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS #> and Tail_ESS are effective sample size measures, and Rhat is the potential #> scale reduction factor on split chains (at convergence, Rhat = 1)."},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"conditions","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design > Design","what":"Conditions","title":"Getting Started with 'rctbayespower'","text":"Find parameters need user specification design. Specify conditions.","code":"required_fn_args(design) #>  #> Arguments that need user specification. #>  #> Simulation function: #> n_total, b_arm_treat, b_covariate  #>  #> Interim function: #> conditions <- build_conditions(   design = design,   condition_values = list(     # two sample sizes     n_total = seq(80, 160, by = 40),     # two effect sizes     b_arm_treat = c(0, 0.3)   ),   static_values = list(     # baseline effect     b_covariate = 0   ) ) print(conditions, n = 100) #>  #> S7 Object of class: 'rctbp_conditions' #> -------------------------------------------------- #>  #> Number of conditions: 6  #> Number of varying parameters: 2  #> Number of static parameters: 1  #>  #> Condition Grid: #> # A tibble: 6 × 3 #>   id_cond n_total b_arm_treat #>     <int>   <dbl>       <dbl> #> 1       1      80         0   #> 2       2      80         0.3 #> 3       3     120         0   #> 4       4     120         0.3 #> 5       5     160         0   #> 6       6     160         0.3"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"run-power-analysis","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Run Power Analysis","title":"Getting Started with 'rctbayespower'","text":"Run analysis using power_analysis function. run model condition return results.","code":"power <- power_analysis(   conditions = conditions,   n_cores = n_cores,   n_sims = n_sims,   verbose = TRUE,   brms_args = list(     chains = 4,     # reduced number of iterations for vignette     iter = 300,     warmup = 100   ) ) #>  #> === Power Analysis === #> Conditions: #> # A tibble: 6 × 3 #>   id_cond n_total b_arm_treat #>     <int>   <dbl>       <dbl> #> 1       1      80         0   #> 2       2      80         0.3 #> 3       3     120         0   #> 4       4     120         0.3 #> 5       5     160         0   #> 6       6     160         0.3 #>  #> Conditions to test: 6  #> Simulations per condition: 1  #> Total simulations: 6  #>  #> Parallel execution using 4 cores: #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess #> Combined results dimensions: 6 18  #> Column names: parameter, threshold_success, threshold_futility, success_prob, futility_prob, power_success, power_futility, median, mad, mean, sd, rhat, ess_bulk, ess_tail, id_sim, id_cond, converged, error  #>  #> Total analysis time: 5.79 minutes"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"power-for-effect-of-0-3","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Power for Effect of 0.3","title":"Getting Started with 'rctbayespower'","text":"","code":"power@summarized_results |>   dplyr::filter(b_arm_treat != 0) |>   dplyr::select(     n_total,     b_arm_treat,     prob_success,     prob_success_se,     power_success,     power_success_se,     prob_futility,     prob_futility_se,     power_futility,     power_futility_se   ) |>   dplyr::arrange(desc(b_arm_treat)) |>   kableExtra::kable(digits = 3, format = \"html\")"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"alpha-error-rate-for-null-effect","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Alpha Error Rate for Null Effect","title":"Getting Started with 'rctbayespower'","text":"power success indicates alpha error rate null effect (b_arm_treat = 0). probability rejecting null hypothesis true, close significance level (0.05) design well specified.","code":"power@summarized_results |>   dplyr::filter(b_arm_treat == 0) |>   dplyr::select(     n_total,     b_arm_treat,     prob_success,     prob_success_se,     power_success,     power_success_se,     power_futility,     power_futility_se,     prob_futility,     prob_futility_se   ) |>   dplyr::arrange(desc(b_arm_treat)) |>   kableExtra::kable(digits = 3,                     format = \"html\")"},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"run-time","dir":"Articles > Src","previous_headings":"Basic Power Analysis Using ANCOVA Design","what":"Run Time","title":"Getting Started with 'rctbayespower'","text":"","code":"n_runs <- nrow(power@conditions@conditions_grid) * power@n_sims cat(\"Total run time:\", round(power@elapsed_time,1), \"minutes for\", n_runs, \"total simulation repetitions using\", power@n_cores, \"cores.\\n\") #> Total run time: 5.8 minutes for 6 total simulation repetitions using 4 cores."},{"path":"https://matthiaskloft.github.io/rctbayespower/articles/src/01-introduction.html","id":"session-information","dir":"Articles > Src","previous_headings":"","what":"Session Information","title":"Getting Started with 'rctbayespower'","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.3 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] rctbayespower_0.0.0.9000 kableExtra_1.4.0         dplyr_1.1.4              #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1      viridisLite_0.4.2     farver_2.1.2          #>  [4] loo_2.8.0             S7_0.2.0              fastmap_1.2.0         #>  [7] lazyeval_0.2.2        tensorA_0.36.2.1      digest_0.6.37         #> [10] lifecycle_1.0.4       StanHeaders_2.32.10   processx_3.8.6        #> [13] magrittr_2.0.4        posterior_1.6.1       compiler_4.5.1        #> [16] rlang_1.1.6           sass_0.4.10           tools_4.5.1           #> [19] yaml_2.3.10           data.table_1.17.8     knitr_1.50            #> [22] bridgesampling_1.1-2  htmlwidgets_1.6.4     pkgbuild_1.4.8        #> [25] plyr_1.8.9            xml2_1.4.0            RColorBrewer_1.1-3    #> [28] abind_1.4-8           withr_3.0.2           purrr_1.1.0           #> [31] desc_1.4.3            grid_4.5.1            stats4_4.5.1          #> [34] inline_0.3.21         ggplot2_4.0.0         scales_1.4.0          #> [37] cli_3.6.5             mvtnorm_1.3-3         rmarkdown_2.30        #> [40] ragg_1.5.0            generics_0.1.4        RcppParallel_5.1.11-1 #> [43] rstudioapi_0.17.1     httr_1.4.7            reshape2_1.4.4        #> [46] cachem_1.1.0          rstan_2.32.7          stringr_1.5.2         #> [49] bayesplot_1.14.0      parallel_4.5.1        matrixStats_1.5.0     #> [52] brms_2.23.0           vctrs_0.6.5           Matrix_1.7-3          #> [55] jsonlite_2.0.0        pwr_1.3-0             callr_3.7.6           #> [58] systemfonts_1.3.1     plotly_4.11.0         jquerylib_0.1.4       #> [61] tidyr_1.3.1           glue_1.8.0            pkgdown_2.1.3         #> [64] codetools_0.2-20      ps_1.9.1              distributional_0.5.0  #> [67] stringi_1.8.7         gtable_0.3.6          QuickJSR_1.8.1        #> [70] tibble_3.3.0          pillar_1.11.1         htmltools_0.5.8.1     #> [73] Brobdingnag_1.2-9     R6_2.6.1              textshaping_1.0.4     #> [76] evaluate_1.0.5        lattice_0.22-7        backports_1.5.0       #> [79] bslib_0.9.0           rstantools_2.5.0      Rcpp_1.1.0            #> [82] svglite_2.2.2         coda_0.19-4.1         gridExtra_2.3         #> [85] nlme_3.1-168          checkmate_2.3.3       xfun_0.53             #> [88] fs_1.6.6              pkgconfig_2.0.3"},{"path":"https://matthiaskloft.github.io/rctbayespower/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Kloft. Author, maintainer, copyright holder.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kloft M (2025). rctbayespower: Bayesian Power Analysis Randomized Controlled Trials. R package version 0.0.0.9000, https://matthiaskloft.github.io/rctbayespower/.","code":"@Manual{,   title = {rctbayespower: Bayesian Power Analysis for Randomized Controlled Trials},   author = {Matthias Kloft},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://matthiaskloft.github.io/rctbayespower/}, }"},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"experimental package yet fully tested. Therefore, recommend using production code critical analyses.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"can install development version rctbayespower GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"matthiaskloft/rctbayespower\")"},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"rctbayespower provides tools conducting Bayesian power analysis randomized controlled trials (RCTs) using brms Stan.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/index.html","id":"ressources","dir":"","previous_headings":"","what":"Ressources","title":"Bayesian Power Analysis for Randomized Controlled Trials","text":"best way get started visit package website introductory vignette: Website: https://matthiaskloft.github.io/rctbayespower/ Vignettes: Introduction: Basic usage concepts Open Issue","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"Computes analytical power detect group effect Analysis Covariance (ANCOVA) model one continuous covariate two groups. model takes form: y ~ covariate + group, covariate assumed follow N(0,1). function vectorized can handle multiple values n /d parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"","code":"analytical_power_ancova_cont_2arms(   n,   d,   beta_cov,   sigma,   equal_groups = TRUE,   p_group = 0.5,   alpha = 0.05,   alternative = c(\"two.sided\", \"greater\", \"less\"),   method = c(\"cohen\", \"theory\"),   covariate_method = c(\"fixed\", \"expected\"),   numint = 2000 )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"n Integer vector integers. Total sample size(s) across groups. d Numeric vector numerics. Cohen's d group effect (standardized mean difference). represents difference group means divided pooled standard deviation, adjusting covariate. two-sided tests, sign matter. one-sided tests, positive d means group 1 > group 0. beta_cov Numeric. True regression coefficient continuous covariate. Assumes covariate follows standard normal distribution N(0,1). sigma Numeric. Residual standard deviation outcome fitting full model (including covariate group effects). equal_groups Logical. TRUE (default), assumes equal group sizes (n1 = n2). FALSE, requires p_group specified. p_group Numeric. Proportion group 1 (used equal_groups = FALSE). alpha Numeric. Type error rate (significance level). Default 0.05. alternative Character. Specifies alternative hypothesis. Must one \"two.sided\" (default), \"greater\", \"less\". one-sided tests, \"greater\" tests group 1 > group 0, \"less\" tests group 1 < group 0. method Character. Specifies lambda calculation method. Must one : \"cohen\" (default): Uses Cohen's convention lambda = f² * (u + v + 1) \"theory\": Uses statistical theory lambda = n * f² covariate_method Character. Specifies handle covariate. Must one : \"fixed\" (default): Assumes fixed covariate values (conditional power) \"expected\": Integrates covariate distribution (expected power, SAS-style) numint Integer. Number integration points covariate_method = \"expected\" (default = 2000).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"Numeric vector. statistical power(s) detect specified group effect(s). n d vectors, returns vector length equal maximum lengths.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"function calculates power testing group effect linear model: outcome y modeled : y = \\(\\beta_0 + \\beta_1\\) covariate + \\(\\beta_2\\) group + \\(\\epsilon\\) null hypothesis \\(H_0\\): \\(\\beta_2 = 0\\) two-sided tests: \\(H_1\\): \\(\\beta_2 \\neq 0\\) one-sided tests: \\(H_1\\): \\(\\beta_2 > 0\\) (alternative = \"greater\") \\(\\beta_2 < 0\\) (alternative = \"less\") covariate follows N(0,1) Group coded 0 1 Residuals \\(\\epsilon\\) follow \\(N(0, \\sigma^2)\\) Method options: \"cohen\": Uses Cohen's convention matching pwr.f2.test \"theory\": Uses classical statistical theory Covariate method options: \"fixed\": Conditional power given fixed covariate values \"expected\": Expected power integrating covariate distribution (SAS approach) two-sided tests, function uses F-test equivalent square two-sided t-test. one-sided tests, uses t-distribution directly.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"function assumes: interaction group covariate covariate variance groups residual variance homogeneous across groups","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"Cohen, J. (1988). Statistical Power Analysis Behavioral Sciences (2nd ed.). Lawrence Erlbaum Associates. Shieh, G. (2020). Power analysis sample size planning ANCOVA designs. Psychometrika, 85(1), 101-120.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/analytical_power_ancova_cont_2arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Calculation for ANCOVA with Continuous Covariate and Two Groups — analytical_power_ancova_cont_2arms","text":"","code":"# \\donttest{ # Two-sided test with Cohen's method and fixed covariate analytical_power_ancova_cont_2arms(n = 100, d = 0.5, beta_cov = 0.4, sigma = 1) #> [1] 0.6924571  # Using statistical theory method analytical_power_ancova_cont_2arms(n = 100, d = 0.5, beta_cov = 0.4, sigma = 1,                                    method = \"theory\") #> [1] 0.6968047  # Using expected power with Cohen's lambda analytical_power_ancova_cont_2arms(n = 100, d = 0.5, beta_cov = 0.4, sigma = 1,                                    covariate_method = \"expected\") #> [1] 0.6879996  # Using expected power with theory lambda analytical_power_ancova_cont_2arms(n = 100, d = 0.5, beta_cov = 0.4, sigma = 1,                                    method = \"theory\", covariate_method = \"expected\") #> [1] 0.6923516  # Vectorized: multiple sample sizes analytical_power_ancova_cont_2arms(n = c(50, 100, 150), d = 0.5, beta_cov = 0.4, sigma = 1) #> [1] 0.4030670 0.6924571 0.8580682  # One-sided test (group 1 > group 0) analytical_power_ancova_cont_2arms(n = 100, d = 0.5, beta_cov = 0.4, sigma = 1,                                    alternative = \"greater\") #> [1] 0.7988858  # Unequal groups (70/30 split) analytical_power_ancova_cont_2arms(n = 150, d = 0.5, beta_cov = 0.4, sigma = 1,                                    equal_groups = FALSE, p_group = 0.7) #> [1] 0.7934917 # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Conditions for Power Analysis — build_conditions","title":"Build Conditions for Power Analysis — build_conditions","text":"Creates structured set conditions argument lists power analysis simulations. function takes varying condition parameters static parameters, validates design requirements, creates necessary argument combinations simulation runs.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Conditions for Power Analysis — build_conditions","text":"","code":"build_conditions(design, condition_values, static_values)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Conditions for Power Analysis — build_conditions","text":"design rctbp_design object defines study design condition_values named list element contains vectors parameter values vary across conditions. combinations created. static_values named list parameter values remain constant across conditions","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Conditions for Power Analysis — build_conditions","text":"S7 object class \"rctbp_conditions\" containing: conditions_grid data.frame parameter combinations condition_arguments list argument lists condition, separated simulation interim analysis arguments design original rctbp_design object condition_values original condition_values list static_values original static_values list","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Conditions for Power Analysis — build_conditions","text":"function performs several validation steps: Checks condition_values static_values overlapping names Validates required parameters provided Ensures p_alloc properly specified list Creates expanded grid condition combinations","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Conditions for Power Analysis — build_conditions","text":"","code":"if (FALSE) { # \\dontrun{ # Create conditions for sample size and effect size analysis conditions <- build_conditions(   design = my_design,   condition_values = list(     n_total = c(100, 200, 300),     effect_size = c(0.2, 0.5, 0.8)   ),   static_values = list(     p_alloc = list(c(0.5, 0.5)),     baseline_effect = 0.1   ) )  # Print the conditions print(conditions) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for rctbp_design Objects — build_design","title":"Constructor for rctbp_design Objects — build_design","text":"Creates S7 rctbp_design object combines rctbp_model analysis configuration parameters Bayesian power analysis. constructor function provides user-friendly interface S7 class constructor.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for rctbp_design Objects — build_design","text":"","code":"build_design(   model,   target_params,   thresholds_success,   thresholds_futility,   p_sig_success,   p_sig_futility,   n_interim_analyses = 0,   interim_function = NULL,   design_name = NULL )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for rctbp_design Objects — build_design","text":"model S7 object class \"rctbp_model\" created build_model() target_params Character vector specifying model parameters analyze power. Must valid parameter names brms model (e.g., \"b_arms_treat\" treatment effect). Required. thresholds_success Numeric vector success thresholds target parameter. Length must match target_params. represent minimum clinically meaningful effect sizes. Required. thresholds_futility Numeric vector futility thresholds target parameter. Length must match target_params. represent effect sizes treatment considered ineffective. Required. p_sig_success Probability threshold declaring success. posterior probability effect exceeds success threshold must greater value declare success (typically 0.975 0.95). Required. p_sig_futility Probability threshold declaring futility. posterior probability effect futility threshold must greater value declare futility (typically 0.5). Required. n_interim_analyses Number interim analyses planned study. Defaults 0 studies final analysis. Must non-negative integer. interim_function Optional function adaptive interim analyses. provided, must accept interim_parameters argument defined call list(). Currently fully implemented. Defaults NULL. design_name Optional character string providing descriptive name design. Defaults NULL.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for rctbp_design Objects — build_design","text":"S7 object class \"rctbp_design\" containing elements model plus analysis configuration. Key components include: data_simulation_fn Data simulation function model brms_model Compiled brms model template target_params Target parameters analysis thresholds_success Success thresholds thresholds_futility Futility thresholds p_sig_success Success probability threshold p_sig_futility Futility probability threshold","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructor for rctbp_design Objects — build_design","text":"rctbp_design class combines model specifications analysis decision criteria: Model Integration: Inherits data simulation function, compiled brms model, metadata model object. Decision Thresholds: Success futility thresholds define regions practical equivalence (ROPE) decision making. Effects success threshold considered clinically meaningful, effects futility threshold suggest treatment ineffectiveness. Probability Thresholds: p_sig_success p_sig_futility parameters control certainty required decisions. Higher values require stronger evidence. Validation: parameters validated consistency underlying model structure .","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for rctbp_design Objects — build_design","text":"","code":"if (FALSE) { # \\dontrun{ # Create an ANCOVA model ancova_model <- build_model_ancova_cont()  # Create a design for analyzing treatment effect my_design <- build_design(   model = ancova_model,   target_params = \"b_arms_treat\",   n_interim_analyses = 0,   thresholds_success = 0.2,   thresholds_futility = 0,   p_sig_success = 0.975,   p_sig_futility = 0.5,   design_name = \"ANCOVA Treatment Effect Analysis\" ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Build Model Object — build_model","title":"Create a Build Model Object — build_model","text":"Constructs build_model object encapsulates data simulation function, compiled brms model, associated metadata power analysis. object serves foundation Bayesian power analysis RCTs.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Build Model Object — build_model","text":"","code":"build_model(   predefined_model = NULL,   data_simulation_fn,   brms_model,   n_endpoints = NULL,   endpoint_types = NULL,   n_arms = NULL,   n_repeated_measures = NULL,   model_name = NULL )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Build Model Object — build_model","text":"predefined_model Optional character string specifying predefined model use instead creating custom model. Currently supported values: \"ancova_cont_2arms\" - ANCOVA model continuous outcomes baseline covariate 2 arms \"ancova_cont_3arms\" - ANCOVA model continuous outcomes baseline covariate 3 arms specified, parameters ignored predefined model returned. Use list_predefined_models() see available models. data_simulation_fn function simulates data RCT. Must take parameters n_total, p_alloc, parameters needed data simulation. brms_model fitted brmsfit object serves template model. compiled without posterior draws (chains = 0) efficiency. n_endpoints Number endpoints study (must positive integer) endpoint_types Character vector specifying type endpoint. Valid types \"continuous\", \"binary\", \"count\". Length must match n_endpoints. n_arms Number arms study including control arm (must positive integer) n_repeated_measures Number repeated measures per participant. Use NULL 0 single time point studies. model_name Optional character string providing descriptive name model","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Build Model Object — build_model","text":"S7 object class \"rctbp_model\" containing specified properties","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Build Model Object — build_model","text":"build_model class encapsulates components needed power analysis simulation: Predefined Models: convenience, users can specify predefined_model use ready-made model configurations. recommended approach standard analyses. using predefined models, parameters ignored. Custom Models: advanced users, custom models can created providing required parameters: Data Simulation Function: Must accept n_total (total sample size), p_alloc (vector allocation probabilities), true_parameter_values (named list parameter values). function return data.frame simulated baseline data ready outcome generation. BRMS Model: compiled brms model used template. model fitted minimal chains (e.g., chains = 0) serve compilation template . Validation: function validates data simulation function required parameter structure brms model properly fitted.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Build Model Object — build_model","text":"","code":"if (FALSE) { # \\dontrun{ # Method 1: Use predefined model (recommended) ancova_model <- build_model(predefined_model = \"ancova_cont\") } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":null,"dir":"Reference","previous_headings":"","what":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"Creates build_model object ANCOVA (Analysis Covariance) flexible specifications number arms, contrasts, allocation ratios, parameters. general function underlies ANCOVA model variants package.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"","code":"build_model_ancova(   prior_intercept = NULL,   prior_sigma = NULL,   prior_covariate = NULL,   prior_treatment = NULL,   link_sigma = \"identity\",   n_arms = NULL,   contrasts = NULL,   p_alloc = NULL,   intercept = NULL,   b_arm_treat = NULL,   b_covariate,   sigma = NULL )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"prior_intercept Prior intercept parameter. NULL (default), uses normal(0, 10). Must brmsprior object created brms::set_prior(). prior_sigma Prior residual standard deviation. NULL (default), uses normal(0, 10). Must brmsprior object created brms::set_prior(). prior_covariate Prior covariate effect. NULL (default), uses student_t(3, 0, 1). Must brmsprior object created brms::set_prior(). prior_treatment Prior treatment effect. NULL (default), uses student_t(3, 0, 1). Must brmsprior object created brms::set_prior(). link_sigma Link function residual standard deviation. Default \"identity\". n_arms Number arms trial (must >= 2). Required parameter. contrasts Contrast method treatment arms. Either character string (e.g., \"contr.treatment\", \"contr.sum\") contrast matrix. Required parameter. p_alloc Numeric vector allocation probabilities summing 1. Length must equal n_arms. Required parameter. intercept Intercept value data generation. Required parameter. b_arm_treat Treatment effect coefficients data generation. Vector length must equal n_arms - 1. Required parameter. b_covariate Covariate effect coefficient data generation. Required parameter. sigma Residual standard deviation data generation (must > 0). Required parameter.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"S7 object class \"rctbp_model_ancova\" ready use build_design() power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"function creates complete ANCOVA model following structure: Model Formula: outcome ~ 1 + covariate + arm Data Structure: generated data includes: covariate: Standardized normal covariate arm: Factor levels \"ctrl\" treatment arms (\"treat_1\", \"treat_2\", etc.) outcome: Continuous outcome generated linear model Parameters: model includes parameters intercept, covariate effect, treatment effects, residual standard deviation (sigma). Model Compilation: function compiles brms model creation, may take time enables efficient power analysis later. Convenience Functions: common use cases, consider wrapper functions can called via 'predefined_model' argument build_model(): build_model_ancova_cont_2arms() - 2-arm continuous ANCOVA build_model_ancova_cont_3arms() - 3-arm continuous ANCOVA","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create General ANCOVA Model with Flexible Specifications — build_model_ancova","text":"","code":"if (FALSE) { # \\dontrun{ # Create 2-arm ANCOVA model model_2arm <- build_model_ancova(   n_arms = 2,   contrasts = \"contr.treatment\",   p_alloc = c(0.5, 0.5),   intercept = 0,   b_arm_treat = 0.5,   b_covariate = 0.3,   sigma = 1 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"Creates 2-arm ANCOVA model sensible defaults continuous outcomes. convenience wrapper around build_model_ancova().","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"","code":"build_model_ancova_cont_2arms(...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"... Additional arguments passed build_model_ancova(). Can override default parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"S7 object class \"rctbp_model_ancova\" ready use build_design() power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"Default parameters: n_arms = 2 contrasts = \"contr.treatment\" p_alloc = c(0.5, 0.5) (equal allocation) intercept = 0 b_arm_treat = NULL (must specified) b_covariate = NULL (must specified) sigma = 1","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_2arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 2-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_2arms","text":"","code":"if (FALSE) { # \\dontrun{ # Create 2-arm ANCOVA model (must specify effect sizes) model_2arm <- build_model_ancova_cont_2arms(   b_arm_treat = 0.5,   b_covariate = 0.3 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"Creates 3-arm ANCOVA model sensible defaults continuous outcomes. convenience wrapper around build_model_ancova().","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"","code":"build_model_ancova_cont_3arms(...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"... Additional arguments passed build_model_ancova(). Can override default parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"S7 object class \"rctbp_model_ancova\" ready use build_design() power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"Default parameters: n_arms = 3 contrasts = \"contr.treatment\" p_alloc = c(1/3, 1/3, 1/3) (equal allocation) intercept = 0 b_arm_treat = NULL (must specified, length 2) b_covariate = NULL (must specified) sigma = 1","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/build_model_ancova_cont_3arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 3-Arm ANCOVA Model for Continuous Outcomes — build_model_ancova_cont_3arms","text":"","code":"if (FALSE) { # \\dontrun{ # Create 3-arm ANCOVA model (must specify effect sizes) model_3arm <- build_model_ancova_cont_3arms(   b_arm_treat = c(0.5, 0.7),   b_covariate = 0.3 ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"Calculate Monte Carlo Standard Error integrated power metrics combine results across multiple effect sizes sample sizes using weighted averages.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"","code":"calculate_mcse_integrated_power(   values,   weights,   n_sims,   is_power_metric = TRUE )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"values Vector power probability values weights Vector weights integration n_sims Total number simulations is_power_metric Logical indicating power metric (TRUE) probability metric (FALSE)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_integrated_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Standard Error for Integrated Power Metrics — calculate_mcse_integrated_power","text":"Monte Carlo Standard Error integrated metric","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"Calculate Monte Carlo Standard Error continuous metrics like mean probabilities.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"","code":"calculate_mcse_mean(values, n_sims)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"values Vector continuous values n_sims Total number simulations","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Standard Error for Continuous Metrics — calculate_mcse_mean","text":"Monte Carlo Standard Error","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"Calculate Monte Carlo Standard Error power metrics based simulation results. MCSE provides estimate uncertainty power estimates due Monte Carlo sampling.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"","code":"calculate_mcse_power(successes, n_sims)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"successes Vector success indicators (TRUE/FALSE 1/0) n_sims Total number simulations","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/calculate_mcse_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Standard Error (MCSE) Calculation — calculate_mcse_power","text":"Monte Carlo Standard Error","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/class_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"S7 Class Validator for Data Frames — class_data_frame","title":"S7 Class Validator for Data Frames — class_data_frame","text":"Defines S7 class class_data_frame accepts S3 data.frame objects. useful validating properties S7 classes hold standard data frame values. Used S7::class_data.frame fails match S3 objects.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/class_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S7 Class Validator for Data Frames — class_data_frame","text":"","code":"class_data_frame(.data)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/class_data_frame.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"S7 Class Validator for Data Frames — class_data_frame","text":"S7 class object validating standard data frames.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/class_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S7 Class Validator for Data Frames — class_data_frame","text":"S7 class validator passes object data.frame.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compare_power_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Power Calculation Methods — compare_power_methods","title":"Compare Power Calculation Methods — compare_power_methods","text":"Compares power calculations across different method combinations.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compare_power_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Power Calculation Methods — compare_power_methods","text":"","code":"compare_power_methods(n, d, beta_cov, sigma, alpha = 0.05)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compare_power_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Power Calculation Methods — compare_power_methods","text":"n Integer. Total sample size. d Numeric. Cohen's d. beta_cov Numeric. Covariate coefficient. sigma Numeric. Residual SD. alpha Numeric. Significance level.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compare_power_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Power Calculation Methods — compare_power_methods","text":"Data frame comparing power across methods.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compare_power_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Power Calculation Methods — compare_power_methods","text":"","code":"# \\donttest{ compare_power_methods(n = 100, d = 0.5, beta_cov = 0.4, sigma = 1) #>           description     power      method covariate_method #> 1       cohen + fixed 0.6924571       cohen            fixed #> 2      theory + fixed 0.6968047      theory            fixed #> 3    cohen + expected 0.6879996       cohen         expected #> 4   theory + expected 0.6923516      theory         expected #> 5 pwr.f2.test + fixed 0.6924571 pwr.f2.test            fixed # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"function extracts posterior samples fitted brms model computes various power analysis measures including success/futility probabilities, significance indicators, parameter estimates, convergence diagnostics. multiple target parameters, also computes combined (union) measures.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"","code":"compute_measures_brmsfit(brmsfit, design)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"brmsfit fitted brms model object containing posterior samples design list containing experimental design specification following components: target_params: Character vector parameter names analyze thresholds_success: Numeric vector success thresholds parameter thresholds_futility: Numeric vector futility thresholds parameter p_sig_success: Probability threshold declaring success significance p_sig_futility: Probability threshold declaring futility significance","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"data frame containing power analysis measures following columns: parameter: Parameter name \"union\" combined measures threshold_success: Success threshold used parameter threshold_futility: Futility threshold used parameter success_prob: Probability parameter exceeds success threshold futility_prob: Probability parameter falls futility threshold power_success: Binary indicator (1/0) success probability meets significance threshold power_futility: Binary indicator (1/0) futility probability meets significance threshold median: Posterior median estimate parameter mad: Posterior median absolute deviation parameter mean: Posterior mean estimate parameter sd: Posterior standard deviation parameter rhat: R-hat convergence diagnostic ess_bulk: Effective sample size bulk estimates ess_tail: Effective sample size tail estimates","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"single parameters, function computes individual measures. multiple target parameters, additionally computes combined (union) measures success requires parameters exceed respective success thresholds simultaneously, futility requires parameters fall respective futility thresholds. threshold vectors shorter number target parameters, first threshold value recycled additional parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/compute_measures_brmsfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Power Measures from brms Model Fit — compute_measures_brmsfit","text":"","code":"if (FALSE) { # \\dontrun{ # Assume you have a fitted brms model and design specification design <- list(   target_params = c(\"b_arms_treat\", \"b_Intercept\"),   thresholds_success = c(0.2, 0.0),   thresholds_futility = c(0.0, 0.0),   p_sig_success = 0.975,   p_sig_futility = 0.95 ) measures <- compute_measures_brmsfit(fitted_model, design) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/f2_from_params_ancova_cont_2arms.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","title":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","text":"Calculates Cohen's f² group effect linear regression model form y ~ covariate + group. Cohen's f² represents proportion variance uniquely explained group variable relative unexplained variance. function vectorized can handle multiple values d parameter.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/f2_from_params_ancova_cont_2arms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","text":"","code":"f2_from_params_ancova_cont_2arms(   d,   beta_cov,   sigma,   equal_groups = TRUE,   p_group = 0.5 )"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/f2_from_params_ancova_cont_2arms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","text":"d Numeric vector numerics. Cohen's d group effect (standardized mean difference). represents difference group means divided pooled standard deviation, adjusting covariate. beta_cov Numeric. True coefficient covariate (assumes covariate ~ N(0,1)). sigma Numeric. Residual standard deviation fitting full model. equal_groups Logical. TRUE (default), assumes equal group sizes (n1 = n2). FALSE, requires p_group specified. p_group Numeric. Proportion group 1 (used equal_groups = FALSE).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/f2_from_params_ancova_cont_2arms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","text":"Numeric vector. Cohen's f² group effect(s).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/f2_from_params_ancova_cont_2arms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","text":"Cohen's f² calculated ratio variance uniquely explained group unexplained variance: $$f² = \\frac{R²_{full} - R²_{reduced}}{1 - R²_{full}}$$ R²_full includes predictors R²_reduced includes covariate.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/f2_from_params_ancova_cont_2arms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Cohen's f² for Group Effect in Linear Model — f2_from_params_ancova_cont_2arms","text":"","code":"# \\donttest{ # Single value f2_from_params_ancova_cont_2arms(d = 0.5, beta_cov = 0.4, sigma = 1) #> [1] 0.0625  # Multiple d values (vectorized) f2_from_params_ancova_cont_2arms(d = c(0.2, 0.5, 0.8), beta_cov = 0.4, sigma = 1) #> [1] 0.0100 0.0625 0.1600  # Unequal groups (70/30 split) f2_from_params_ancova_cont_2arms(d = 0.5, beta_cov = 0.4, sigma = 1,                                   equal_groups = FALSE, p_group = 0.7) #> [1] 0.0525 # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Function Arguments Without Default Values — get_arg_defaults","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"Extracts names function arguments default values. utility function used identifying required parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"","code":"get_arg_defaults(fn)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"fn function object analyze","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_arg_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Function Arguments Without Default Values — get_arg_defaults","text":"character vector containing names arguments without default values","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Function Arguments Without Default Values — get_args_without_defaults","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"Internal utility function extracts names function arguments default values (either missing explicitly NULL).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"","code":"get_args_without_defaults(fn)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"fn function object analyze","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_args_without_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Function Arguments Without Default Values — get_args_without_defaults","text":"character vector containing names arguments without default values","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_predefined_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a predefined model by name — get_predefined_model","title":"Get a predefined model by name — get_predefined_model","text":"Access internal predefined model name.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_predefined_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a predefined model by name — get_predefined_model","text":"","code":"get_predefined_model(model_name)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_predefined_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a predefined model by name — get_predefined_model","text":"model_name Character scalar, name predefined model.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/get_predefined_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a predefined model by name — get_predefined_model","text":"model object.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/list_predefined_models.html","id":null,"dir":"Reference","previous_headings":"","what":"List available predefined models — list_predefined_models","title":"List available predefined models — list_predefined_models","text":"function inspects package's internal environment returns names predefined model objects inherit rctbp_model class. models prebuilt stored internally package via sysdata.rda exported users directly. function allows discovery available predefined models programmatically.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/list_predefined_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available predefined models — list_predefined_models","text":"","code":"list_predefined_models(filter_string = NULL)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/list_predefined_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available predefined models — list_predefined_models","text":"filter_string Optional character string filtering model names. provided, models whose names match pattern (via base::grepl()) returned. Use find specific types models (e.g., \"ancova\").","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/list_predefined_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available predefined models — list_predefined_models","text":"character vector object names corresponding predefined models. Returns empty character vector models found filter excludes available models.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/list_predefined_models.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List available predefined models — list_predefined_models","text":"returned model names can used directly build_model() passing predefined_model parameter: model <- build_model(predefined_model = \"model_name\") provides convenient way discover use prebuilt models without needing specify model parameters manually.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/list_predefined_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available predefined models — list_predefined_models","text":"","code":"# List all available predefined models list_predefined_models() #> [1] \"ancova_cont_2arms\" \"ancova_cont_3arms\"  # Filter for ANCOVA models only list_predefined_models(filter_string = \"ancova\") #> [1] \"ancova_cont_2arms\" \"ancova_cont_3arms\"  # Use discovered model with build_model() available_models <- list_predefined_models() if (length(available_models) > 0) {   model <- build_model(predefined_model = available_models[1]) }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and Validate Design Prior — parse_design_prior","title":"Parse and Validate Design Prior — parse_design_prior","text":"Internal helper function parse design prior specifications create weight quantile functions design prior integration.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and Validate Design Prior — parse_design_prior","text":"","code":"parse_design_prior(design_prior, effect_sizes, verbose = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and Validate Design Prior — parse_design_prior","text":"design_prior Design prior specification (string function) effect_sizes Vector effect sizes coverage checking verbose Whether print parsing information (default: TRUE)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/parse_design_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse and Validate Design Prior — parse_design_prior","text":"List containing weight_fn, quantile_fn, weight_type","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbp_power_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Power Analysis Results — plot.rctbp_power_analysis","title":"Plot Power Analysis Results — plot.rctbp_power_analysis","text":"Create comprehensive visualizations power analysis results rctbp_power_analysis objects. Supports different plot types based analysis type (sample_only, effect_only, varying).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbp_power_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Power Analysis Results — plot.rctbp_power_analysis","text":"x rctbp_power_analysis object run results type Type plot create: \"auto\" - Automatically detect best plot type based analysis (default) \"power_curve\" - Power curve across single varying dimension \"heatmap\" - 2D heatmap sample sizes effect sizes vary \"integrated\" - Integrated power results design prior used \"comparison\" - Compare power vs posterior probabilities metric power metric display: \"success\" - Success power probability \"futility\" - Futility power probability \"\" - success futility power probabilities (default) values values display: \"\" - power posterior probabilities (default) \"power\" - Power \"post_prob\" - Posterior probabilities show_target Whether show target power lines (default: TRUE) show_integrated Whether include integrated power available (default: TRUE) facet_by power_curve plots sample sizes effect sizes vary: \"effect_size\" - Facet effect size, vary sample size x-axis (default) \"sample_size\" - Facet sample size, vary effect size x-axis design_prior Optional design prior runtime integrated power computation. Can : string brms prior syntax (e.g., \"normal(0.3, 0.1)\", \"student_t(6, 0.5, 0.2)\") R function taking effect size input (e.g., function(x) dnorm(x, 0.5, 0.2)) NULL runtime integration (default) provided, integrated power computed using design prior instead design prior specified original rctbp_power_analysis object. valid effect sizes vary (length > 1). ... Additional arguments passed plotly functions","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/plot.rctbp_power_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Power Analysis Results — plot.rctbp_power_analysis","text":"plotly object plot types (power curves, heatmaps, comparison plots)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Power Analysis Configuration — power_analysis","title":"Build Power Analysis Configuration — power_analysis","text":"Creates power analysis configuration object specifies parameters needed conduct Bayesian power analysis randomized controlled trials. function creates S7 object serves main interface configuring executing power analysis simulations.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Power Analysis Configuration — power_analysis","text":"","code":"power_analysis(run = TRUE, ...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Power Analysis Configuration — power_analysis","text":"run Logical indicating whether immediately execute analysis creating configuration object (default TRUE) ... Arguments passed rctbp_power_analysis constructor, including: conditions: rctbp_conditions object containing experimental conditions design parameters power analysis n_sims: Number simulations run per condition (default 100) n_cores: Number CPU cores use parallel execution (default 1). Must exceed number available cores verbose: Logical indicating whether display progress information analysis details (default TRUE) brms_args: List additional arguments pass brms::brm() function (default empty list) design_prior: Prior specification design parameters. Can NULL (prior), string brms syntax, function custom priors","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Power Analysis Configuration — power_analysis","text":"S7 object class \"rctbp_power_analysis\" containing: input parameters simulation control Access design model specifications via properties Placeholder slots results (filled running analysis)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Power Analysis Configuration — power_analysis","text":"function validates input parameters creates configuration object can executed using run(). resulting object provides access design model information S7 properties: Key Properties: design: Access experimental design configuration model: Access underlying Bayesian model specification conditions: condition grid analysis Parallel Processing: n_cores > 1, simulations distributed across multiple cores improved performance. function validates n_cores exceed available system cores.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/power_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Power Analysis Configuration — power_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Create conditions for power analysis conditions <- build_conditions(design, n_total = c(100, 200))  # Basic power analysis configuration power_config <- build_power_analysis(conditions, n_sims = 100)  # Parallel execution with custom BRMS arguments power_config <- build_power_analysis(   conditions = conditions,   n_sims = 1000,   n_cores = 4,   brms_args = list(chains = 4, iter = 2000) )  # Execute the analysis results <- run(power_config) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for rctbp_conditions Objects — print.rctbp_conditions","title":"Print Method for rctbp_conditions Objects — print.rctbp_conditions","text":"Prints formatted summary condition grids created build_conditions(). Shows condition grid parameter combinations provides summary information number conditions parameters.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for rctbp_conditions Objects — print.rctbp_conditions","text":"x S7 object class \"rctbp_conditions\" created build_conditions() ... Additional arguments passed print()","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for rctbp_conditions Objects — print.rctbp_conditions","text":"Invisibly returns input object","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for rctbp_conditions Objects — print.rctbp_conditions","text":"","code":"if (FALSE) { # \\dontrun{ conditions <- build_conditions(design, condition_values, static_values) print(conditions) # or just: conditions } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for rctbp_design Objects — print.rctbp_design","title":"Print Method for rctbp_design Objects — print.rctbp_design","text":"Displays comprehensive summary rctbp_design object, showing model specifications analysis configuration organized format.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for rctbp_design Objects — print.rctbp_design","text":"x S7 object class \"rctbp_design\" ... Additional arguments (currently unused)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for rctbp_design Objects — print.rctbp_design","text":"Invisibly returns input object. Used side effects (printing).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for rctbp_model Objects — print.rctbp_model","title":"Print Method for rctbp_model Objects — print.rctbp_model","text":"Displays summary rctbp_model object, including model specifications, parameter information, function details.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for rctbp_model Objects — print.rctbp_model","text":"x S7 object class \"rctbp_model\" ... Additional arguments (currently unused)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for rctbp_model Objects — print.rctbp_model","text":"Invisibly returns input object. Used side effects (printing).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_power_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for rctbp_power_analysis Objects — print.rctbp_power_analysis","title":"Print Method for rctbp_power_analysis Objects — print.rctbp_power_analysis","text":"Displays summary power analysis configuration object, including analysis parameters, condition information, design specifications.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_power_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for rctbp_power_analysis Objects — print.rctbp_power_analysis","text":"x S7 object class \"rctbp_power_analysis\" ... Additional arguments (currently unused)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/print.rctbp_power_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for rctbp_power_analysis Objects — print.rctbp_power_analysis","text":"Invisibly returns input object. Used side effects (printing).","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/rctbayespower-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'rctbayespower' package. — rctbayespower-package","title":"The 'rctbayespower' package. — rctbayespower-package","text":"Bayesian power analysis randomized controlled trials (RCTs) using brms Stan.","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/rctbayespower-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'rctbayespower' package. — rctbayespower-package","text":"Maintainer: Matthias Kloft kloft.dev+rctbayespower@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Required Parameters for Design or Model Objects — required_fn_args","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"Generic wrapper function identifies required parameters either rctbp_design rctbayespower_model objects dispatching appropriate specific function.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"","code":"required_fn_args(object, print = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"object Either rctbp_design rctbayespower_model object print Logical. TRUE (default), prints required parameters console","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"design objects: list simulation, interim, parameters. model objects: character vector required parameters. returned invisibly.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Required Parameters for Design or Model Objects — required_fn_args","text":"","code":"if (FALSE) { # \\dontrun{ required_fn_args(my_object) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Required Parameters for a Design — required_fn_args_design","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"Extracts required parameters (without default values) data simulation function interim analysis function rctbayespower design object. helps users identify parameters must specified running simulations.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"","code":"required_fn_args_design(design, print = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"design rctbp_design object print Logical. TRUE (default), prints required parameters console","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Required Parameters for a Design — required_fn_args_design","text":"character vector containing names required parameters","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Required Parameters for a Model — required_fn_args_model","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"Extracts required parameters (without default values) data simulation function rctbayespower model object.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"","code":"required_fn_args_model(model, print = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"model rctbayespower_model object print Logical. TRUE (default), prints required parameters console","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/required_fn_args_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Required Parameters for a Model — required_fn_args_model","text":"character vector containing names required parameters (returned invisibly)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Analysis Objects — run","title":"Run Analysis Objects — run","text":"Generic function executing analysis objects. function provides unified interface running different types analysis configurations.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Analysis Objects — run","text":"","code":"run(object, ...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Analysis Objects — run","text":"object S7 object run (e.g., rctbp_power_analysis) ... Additional arguments passed specific methods","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Analysis Objects — run","text":"result depends specific method called. power analysis objects, returns modified object results stored summarized_results raw_results properties.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Analysis Objects — run","text":"generic function dispatches appropriate methods based class input object. Currently supported: rctbp_power_analysis: Executes Bayesian power analysis","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Analysis Objects — run","text":"","code":"if (FALSE) { # \\dontrun{ # Create and run power analysis power_config <- rctbp_power_analysis(conditions = conditions, n_sims = 100) power_config <- run(power_config) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.rctbp_power_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Power Analysis — run.rctbp_power_analysis","title":"Run Power Analysis — run.rctbp_power_analysis","text":"Executes Bayesian power analysis using configuration specified rctbp_power_analysis object. method contains core simulation logic returns comprehensive results.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.rctbp_power_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Power Analysis — run.rctbp_power_analysis","text":"object S7 object class \"rctbp_power_analysis\" ... Additional arguments (currently unused)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.rctbp_power_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Power Analysis — run.rctbp_power_analysis","text":"list class \"rctbayespower_sim_result\" containing: results_df: Aggregated power analysis results results_df_raw: Raw simulation results runs design: design object used analysis conditions: condition specifications used n_sims: Number simulations per condition elapsed_time: Total analysis runtime","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/run.rctbp_power_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Power Analysis — run.rctbp_power_analysis","text":"method implements core power analysis algorithm: Parallel Execution: n_cores > 1, simulations distributed across multiple cores optimal performance. Progress Tracking: Progress shown pbapply available, fallback basic progress reporting. Error Handling: Robust error handling ensures partial results preserved even simulations fail. Result Aggregation: Individual simulation results aggregated power curves summary statistics.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"Executes single simulation run using pre-validated condition arguments. function core simulation engine used power analysis functions.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"","code":"simulate_single_run(condition_arguments, id_sim, design, brms_args = list())"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"condition_arguments single entry condition_arguments list created build_conditions(). Contains 'sim_args' 'n_total', 'p_alloc', 'true_parameter_values', plus optional 'interim_args'. id_sim Simulation identifier tracking individual simulation runs design rctbp_design rctbp_power_analysis object containing simulation model specifications brms_args Arguments passed brms model fitting. Default includes 'algorithm' = \"sampling\", 'iter' = 500, 'warmup' = 250, 'chains' = 4, 'cores' = 1. User can override add additional arguments.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"fitted brms model object success, NULL failure","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/simulate_single_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single Run Simulation for RCT Bayesian Power Analysis — simulate_single_run","text":"","code":"if (FALSE) { # \\dontrun{ # Create model, design, and conditions ancova_model <- build_model(\"ancova_cont_2arms\")() design <- build_design(   model = ancova_model,   target_params = \"b_arms_treat\",   n_interim_analyses = 0,   thresholds_success = 0.2,   thresholds_futility = 0,   p_sig_success = 0.975,   p_sig_futility = 0.5 )  conditions <- build_conditions(   design = design,   condition_values = list(n_total = c(100, 200)),   static_values = list(     p_alloc = list(c(0.5, 0.5)),     true_parameter_values = list(       intercept = 0,       sigma = 1,       b_arms_treat = 0.5,       b_covariate = 0.2     )   ) )  # Simulate single condition with default brms settings result <- simulate_single_run(   condition_arguments = conditions$condition_arguments[[1]],   design = conditions$design )  # Or with custom brms arguments result_custom <- simulate_single_run(   condition_arguments = conditions$condition_arguments[[1]],   design = conditions$design,   brms_args = list(algorithm = \"meanfield\", iter = 1000) ) } # }"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Power Analysis Simulation Results — summarize_sims","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"function aggregates raw simulation results across multiple runs compute summary statistics including power estimates, parameter estimates, convergence metrics, Monte Carlo standard errors.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"","code":"summarize_sims(results_df_raw, n_sims)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"results_df_raw data frame containing raw simulation results columns: id_cond: Condition identifier parameter: Parameter name threshold_success: Success threshold parameter threshold_futility: Futility threshold parameter success_prob: Probability success simulation futility_prob: Probability futility simulation sig_success: Binary success significance indicator sig_futility: Binary futility significance indicator est_median: Posterior median estimates est_mad: Posterior median absolute deviation est_mean: Posterior mean estimates est_sd: Posterior standard deviation rhat: R-hat convergence diagnostic ess_bulk: Bulk effective sample size ess_tail: Tail effective sample size converged: Convergence status indicator error: Error messages () n_sims Integer specifying total number simulations run","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"data frame summarized results grouped condition parameter, containing mean estimates Monte Carlo standard errors (SE) metrics: Probability estimates: prob_success, prob_futility Power estimates: power_success, power_futility Parameter estimates: median, mean, mad, sd Convergence metrics: rhat, ess_bulk, ess_tail, conv_rate metric includes corresponding _se columns standard errors.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/summarize_sims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Power Analysis Simulation Results — summarize_sims","text":"function groups results condition ID, parameter, thresholds, computes: Mean values across simulations continuous metrics Power proportion simulations meeting significance criteria Convergence rate proportion successfully converged simulations Monte Carlo standard errors uncertainty quantification Concatenated error messages debugging purposes","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/update_s7_with_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Properties of an S7 Object with ... — update_S7_with_dots","title":"Update Properties of an S7 Object with ... — update_S7_with_dots","text":"Updates properties S7 object replacing values passed via .... existing properties object's class updated; non-matching names ... trigger warning.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/update_s7_with_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Properties of an S7 Object with ... — update_S7_with_dots","text":"","code":"update_S7_with_dots(object, ...)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/update_s7_with_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Properties of an S7 Object with ... — update_S7_with_dots","text":"object S7 object whose class defines properties via S7::new_class(). ... Named arguments corresponding properties update.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/update_s7_with_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Properties of an S7 Object with ... — update_S7_with_dots","text":"modified S7 object updated property values.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Weighting Function Implementation — validate_weighting_function","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"Tests weighting function parsing computation rctbp_power_analysis objects works correctly. function validates brms syntax parsing R function handling, well weighted power computation logic.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"","code":"validate_weighting_function(effect_sizes = seq(0.2, 0.8, 0.1), verbose = TRUE)"},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"effect_sizes Vector effect sizes test (default: seq(0.2, 0.8, 0.1)) verbose Whether print detailed test results (default: TRUE)","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"list containing validation results: all_tests_passed: Boolean indicating tests passed test_results: List individual test results errors: errors encountered testing","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/reference/validate_weighting_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Weighting Function Implementation — validate_weighting_function","text":"validation function tests: Normal distribution parsing brms syntax Student-t distribution parsing brms syntax Custom R function validation Weight normalization (ensures weights sum 1) Quantile computation coverage checking Error handling invalid inputs","code":""},{"path":[]},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"development-status-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Development Status","title":"rctbayespower 0.0.0.9000 (Development Version)","text":"⚠️ package currently active development yet released.","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"new-features-0-0-0-9000","dir":"Changelog","previous_headings":"Development Status","what":"New Features","title":"rctbayespower 0.0.0.9000 (Development Version)","text":"power_analysis(): Run power analysis ANCOVA model continuous outcomes baseline covariate build_model(\"ancova_cont_2arms\") build_model(\"ancova_cont_3arms\") Probability success futility Significance Power: Traditional frequentist-like power success futility Comprehensive parallelization support Object-oriented API consistent parameter management","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"api-design-0-0-0-9000","dir":"Changelog","previous_headings":"Development Status","what":"API Design","title":"rctbayespower 0.0.0.9000 (Development Version)","text":"package uses object-oriented approach requiring users : 1. Build model specifications using build_model() pre-built models 2. Create study designs build_design() 3. Generate analysis conditions build_conditions() 4. Run power analysis using power_analysis()","code":""},{"path":"https://matthiaskloft.github.io/rctbayespower/news/index.html","id":"dependencies-0-0-0-9000","dir":"Changelog","previous_headings":"Development Status","what":"Dependencies","title":"rctbayespower 0.0.0.9000 (Development Version)","text":"Requires R >= 4.1.0 Integrates brms Bayesian model fitting Plotting capabilities via plotly Data manipulation dplyr, tidyr, purrr Parallelization support via parallel package","code":""}]
